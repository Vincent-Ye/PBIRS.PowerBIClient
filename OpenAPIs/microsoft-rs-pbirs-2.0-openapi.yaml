openapi: 3.0.1
info:
  title: Power BI Report Server REST API
  description: "The Power BI Report Server REST API provides programmatic access to\
    \ the report server catalog. \nFor example, basic CRUD operations can be done\
    \ on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions,\
    \ etc.\n   \nThe REST API can also be used to provide more advanced functionality,\
    \ such as:\n* Navigate the folder hierarchy\n* Discover the contents of a folder\n\
    * Download a report definition\n* Modify default report parameters\n* Change or\
    \ execute a refresh plan\n* A whole lot more\n\nThe REST API is a RESTful successor\
    \ to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).\n\
    \nSince Power BI Report Server is a superset of SQL Server Reporting Services,\
    \ the Power BI Report Server REST API is a superset of the \n[SQL Server Reporting\
    \ Services REST API](https://app.swaggerhub.com/apis/microsoft-rs/SSRS/2.0).\n\
    \n__Power BI Report Server API Additions__\n* October 2020 Release\n  * /PowerBIReports({Id})/DataModelParameters(GET\
    \ & POST)\n\n* January 2019 Release\n  * /PowerBIReports({Id})/DataModelRoles\
    \ (GET)\n  * /PowerBIReports({Id})/DataModelRoleAssignments (GET & PUT)\n\nHappy\
    \ coding!\n\n__API samples:__ https://github.com/Microsoft/Reporting-Services\n\
    \n__Developer documentation:__ https://powerbi.microsoft.com/documentation/reportserver-developer-handbook-overview/\n\
    \n__Team Blog:__  https://powerbi.microsoft.com/blog/\n\n__Support forums:__ \
    \ https://community.powerbi.com/t5/Report-Server/bd-p/ReportServer\n"
  version: "2.0"
servers:
- url: http://localhost/reports/api/v2.0
- url: https://localhost/reports/api/v2.0
tags:
- name: CacheRefreshPlans
- name: CatalogItems
- name: DataSets
- name: DataSources
- name: ExcelWorkbooks
- name: Extensions
- name: FavoriteItems
- name: Folders
- name: Kpis
- name: LinkedReports
- name: Me
- name: MobileReports
- name: PowerBIReports
- name: Reports
- name: Resources
- name: Session
- name: Subscriptions
- name: System
paths:
  /CacheRefreshPlans:
    post:
      tags:
      - CacheRefreshPlans
      summary: Creates a new CacheRefreshPlan item.
      operationId: AddCacheRefreshPlan
      requestBody:
        description: The definition of the new CacheRefreshPlan item.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CacheRefreshPlan'
        required: true
      responses:
        201:
          description: The definition of the CacheRefreshPlan item that was just created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CacheRefreshPlan'
        400:
          description: Couldn't understand your request.
          content: {}
        409:
          description: Conflict. Item already exists.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: CacheRefreshPlan
  /CacheRefreshPlans({Id}):
    get:
      tags:
      - CacheRefreshPlans
      summary: Gets a CacheRefreshPlan item specified by the Id.
      operationId: GetCacheRefreshPlan
      parameters:
      - name: Id
        in: path
        description: |-
          The GUID that uniquely identifies the CacheRefreshPlan.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: The CacheRefreshPlan item specified by the Id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CacheRefreshPlan'
        400:
          description: Couldn't understand your request.
          content: {}
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    put:
      tags:
      - CacheRefreshPlans
      summary: Replaces the specified CacheRefreshPlan item using the provided definition.
      operationId: SetCacheRefreshPlan
      parameters:
      - name: Id
        in: path
        description: |-
          The GUID that uniquely identifies the CacheRefreshPlan.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: Definition of the CacheRefreshPlan item that updates the current
          item on the server.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CacheRefreshPlan'
        required: true
      responses:
        204:
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CacheRefreshPlan'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: CacheRefreshPlan
    delete:
      tags:
      - CacheRefreshPlans
      summary: Deletes the specified CacheRefreshPlan.
      operationId: DeleteCacheRefreshPlan
      parameters:
      - name: Id
        in: path
        description: |-
          The GUID that uniquely identifies the CacheRefreshPlan.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /CacheRefreshPlans({Id})/History:
    get:
      tags:
      - CacheRefreshPlans
      summary: Gets an array of history or execution records for the specified cache
        refresh plan.
      operationId: GetCacheRefreshPlanHistory
      parameters:
      - name: Id
        in: path
        description: |-
          The GUID that uniquely identifies the CacheRefreshPlan.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                title: ODataSubscriptionHistory
                type: object
                properties:
                  '@odata.context':
                    type: string
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/SubscriptionHistory'
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /CacheRefreshPlans({Id})/Model.Execute:
    post:
      tags:
      - CacheRefreshPlans
      summary: Executes given CacheRefreshPlan immediately.
      operationId: ExecuteCacheRefreshPlan
      parameters:
      - name: Id
        in: path
        description: |-
          The GUID that uniquely identifies the CacheRefreshPlan.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
        required: true
        schema:
          type: string
          format: string
      responses:
        204:
          description: The return result is empty.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /CatalogItems:
    get:
      tags:
      - CatalogItems
      summary: Gets an array of CatalogItems.
      operationId: GetCatalogItems
      parameters:
      - name: $top
        in: query
        description: Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
        schema:
          type: integer
      - name: $skip
        in: query
        description: Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
        schema:
          type: integer
      - name: $filter
        in: query
        description: Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
        schema:
          type: string
      - name: $count
        in: query
        description: Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
        schema:
          type: string
      - name: $orderBy
        in: query
        description: Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
        schema:
          type: string
      - name: $select
        in: query
        description: Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
        schema:
          type: string
      responses:
        200:
          description: OData array of CatalogItems.
          content:
            application/json:
              schema:
                title: ODataCatalogItems
                type: object
                properties:
                  '@odata.context':
                    type: string
                  '@odata.count':
                    type: integer
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/CatalogItem'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    post:
      tags:
      - CatalogItems
      summary: Creates a new CatalogItem.
      operationId: AddCatalogItem
      requestBody:
        description: The definition of the new CatalogItem.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CatalogItem'
        required: true
      responses:
        201:
          description: The definition of the CatalogItem that was just created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogItem'
        400:
          description: Couldn't understand your request.
          content: {}
        409:
          description: Conflict. Item already exists.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: CatalogItem
  /CatalogItems/Model.DeleteItems:
    post:
      tags:
      - CatalogItems
      summary: Deletes the given list of items
      operationId: DeleteCatalogItems
      requestBody:
        description: List of catalog item paths to delete.
        content:
          application/json:
            schema:
              title: DeleteItemsRequest
              type: object
              properties:
                CatalogItemPaths:
                  type: array
                  items:
                    type: string
        required: true
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationsResult'
        400:
          description: Couldn't understand your request.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: DeleteItemsRequest
  /CatalogItems/Model.MoveItems:
    post:
      tags:
      - CatalogItems
      summary: Moves given list of items to target folder.
      operationId: MoveCatalogItems
      requestBody:
        description: List of catalog item paths and target folder.
        content:
          application/json:
            schema:
              title: MoveItemsRequest
              type: object
              properties:
                CatalogItemPaths:
                  type: array
                  items:
                    type: string
                TargetPath:
                  type: string
        required: true
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationsResult'
        400:
          description: Couldn't understand your request.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: MoveItemsRequest
  /CatalogItems({Id}):
    get:
      tags:
      - CatalogItems
      summary: Gets a CatalogItem specified by the Id.
      operationId: GetCatalogItem
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: The CatalogItem specified by the Id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogItem'
        400:
          description: Couldn't understand your request.
          content: {}
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    delete:
      tags:
      - CatalogItems
      summary: Deletes the specified CatalogItem.
      operationId: DeleteCatalogItem
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    patch:
      tags:
      - CatalogItems
      summary: Updates the specified CatalogItem using the provided definition.
      operationId: UpdateCatalogItem
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: Definition of the CatalogItem that updates the current item on
          the server. The type for the defintion can be any of the supported CatalogItemTypes.
          It is only necessary to include properties to be updated. All other property
          values will be left unchanged.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CatalogItem'
        required: true
      responses:
        204:
          description: No Content
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: CatalogItem
  /CatalogItems({Id})/Content/$value:
    get:
      tags:
      - CatalogItems
      summary: Gets the content of the specified CatalogItem specified by the Id.
      operationId: GetCatalogItemContent
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: The content of the CatalogItem specified by the Id.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        204:
          description: No content.
          content: {}
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/odata.error'
  /CatalogItems({Id})/Policies:
    get:
      tags:
      - CatalogItems
      summary: Gets ItemPolicies associated with the specified CatalogItem.
      operationId: GetCatalogItemPolicies
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: An array of ItemPolicies that are associated with the specified
            CatalogItem.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemPolicy'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    put:
      tags:
      - CatalogItems
      summary: Replaces ItemPolicies associated with the specified CatalogItem.
      operationId: SetCatalogItemPolicies
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: The ItemPolicy definitions that will be replaced.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ItemPolicy'
        required: true
      responses:
        200:
          description: Ok
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: CatalogItem
  /CatalogItems({Id})/Properties:
    get:
      tags:
      - CatalogItems
      summary: Gets the specified Properties for the CatalogItem (takes list of Property
        names to retrieve the values)
      operationId: GetCatalogItemProperties
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      - name: Properties
        in: query
        description: Comma-separated list of Property names to be returned.
        style: form
        explode: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                title: ODataProperties
                type: object
                properties:
                  '@odata.context':
                    type: string
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/Property'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    put:
      tags:
      - CatalogItems
      summary: Updates a CatalogItem's Properties with the list of given properties.
      operationId: UpdateCatalogItemProperties
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: The Properties that will be updated. It is only necessary to
          include properties to be updated. All other property values will be left
          unchanged.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Property'
        required: true
      responses:
        200:
          description: Ok
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: Properties
  /CatalogItems({Id})/Roles:
    get:
      tags:
      - CatalogItems
      summary: Gets the list of available Roles for the CatalogItem
      operationId: GetCatalogItemRoles
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                title: ODataProperties
                type: object
                properties:
                  '@odata.context':
                    type: string
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/Role'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /DataSets:
    get:
      tags:
      - DataSets
      summary: Gets an array of DataSet CatalogItems.
      operationId: GetDataSets
      parameters:
      - name: $top
        in: query
        description: Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
        schema:
          type: integer
      - name: $skip
        in: query
        description: Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
        schema:
          type: integer
      - name: $filter
        in: query
        description: Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
        schema:
          type: string
      - name: $count
        in: query
        description: Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
        schema:
          type: string
      - name: $orderBy
        in: query
        description: Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
        schema:
          type: string
      - name: $select
        in: query
        description: Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
        schema:
          type: string
      responses:
        200:
          description: OData array of DataSet CatalogItems.
          content:
            application/json:
              schema:
                title: ODataDataSets
                type: object
                properties:
                  '@odata.context':
                    type: string
                  '@odata.count':
                    type: integer
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/DataSet'
        400:
          description: Couldn't understand your request.
          content: {}
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    post:
      tags:
      - DataSets
      summary: Creates a new DataSet CatalogItem.
      operationId: AddDataSet
      requestBody:
        description: The definition of the new DataSet CatalogItem.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataSet'
        required: true
      responses:
        201:
          description: The definition of the DataSet item that was just created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSet'
        400:
          description: Couldn't understand your request.
          content: {}
        409:
          description: Conflict. Item already exists.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: DataSet
  /DataSets({Id}):
    get:
      tags:
      - DataSets
      summary: Gets a DataSet CatalogItem specified by the Id.
      operationId: GetDataSet
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: The DataSet CatalogItem specified by the Id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSet'
        400:
          description: Couldn't understand your request.
          content: {}
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    delete:
      tags:
      - DataSets
      summary: Deletes the specified DataSet.
      operationId: DeleteDataSet
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    patch:
      tags:
      - DataSets
      summary: Updates the specified DataSet CatalogItem using the provided definition.
      operationId: UpdateDataSet
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: Definition of the DataSet item that updates the current item
          on the server. It is only necessary to include properties to be updated.
          All other property values on the CatalogItem will be left unchanged.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataSet'
        required: true
      responses:
        204:
          description: No Content
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: DataSet
  /DataSets({Id})/AllowedActions:
    get:
      tags:
      - DataSets
      summary: Gets a list of actions allowed in the current session; user permissions
        and product edition capabilities are considered when querying.
      operationId: GetDataSetAllowedActions
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: OData array of AllowedActions.
          content:
            application/json:
              schema:
                title: ODataAllowedActions
                type: object
                properties:
                  '@odata.context':
                    type: string
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/AllowedAction'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /DataSets({Id})/CacheOptions:
    get:
      tags:
      - DataSets
      summary: Gets the CacheOption's content for a given DataSet.
      operationId: GetDataSetCacheOptions
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Returns the CacheOption's content for a given DataSet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CacheOptions'
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    put:
      tags:
      - DataSets
      summary: Replaces the CacheOption's content for a given DataSet using the provided
        definition.
      operationId: SetDataSetCacheOptions
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: Updated definition for the CacheOption's content associated with
          the given DataSet.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CacheOptions'
        required: true
      responses:
        204:
          description: Ok
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: CacheOptions
  /DataSets({Id})/CacheRefreshPlans:
    get:
      tags:
      - DataSets
      summary: Gets the CacheRefreshPlans for a given DataSet.
      operationId: GetDataSetCacheRefreshPlans
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Returns the CacheRefreshPlans for a given DataSet.
          content:
            application/json:
              schema:
                title: ODataCacheRefreshPlans
                type: object
                properties:
                  '@odata.context':
                    type: string
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/CacheRefreshPlan'
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /DataSets({Id})/Content/$value:
    get:
      tags:
      - DataSets
      summary: Gets the content of the specified DataSet CatalogItem specified by
        the Id.
      operationId: GetDataSetContent
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: The content of the DataSet CatalogItem specified by the Id.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/odata.error'
  /DataSets({Id})/Data:
    get:
      tags:
      - DataSets
      summary: Gets the data for a given DataSet. With the exception of the ID property,
        columns that are defined in the DataSet will be returned as open or dynamic
        types in the result.
      operationId: GetDataSetODataFeed
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                title: ODataDataSetRows
                type: object
                properties:
                  '@odata.context':
                    type: string
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/DataSetRow'
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /DataSets({Id})/DataSources:
    get:
      tags:
      - DataSets
      summary: Gets the DataSources associated with the specified DataSet.
      operationId: GetDataSetDataSources
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: An array of DataSources that are associated with the specified
            DataSet CatalogItem.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataSource'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    put:
      tags:
      - DataSets
      summary: Updates the DataSource definition associated with the specified DataSet.
      operationId: SetDataSetDataSources
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: Updated definition for the DataSource associated with the specified
          DataSet CatalogItem.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataSource'
        required: true
      responses:
        200:
          description: OK
          content: {}
        400:
          description: Couldn't understand your request.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: DataSource
  /DataSets({Id})/DataSources({DataSourceId}):
    get:
      tags:
      - DataSets
      summary: Gets the DataSource specified by the DataSourceId that is associated
        with the DataSet.
      operationId: GetDataSetDataSource
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      - name: DataSourceId
        in: path
        description: The Id of the DataSource associated with the DataSet.
        required: true
        schema:
          type: string
      responses:
        200:
          description: The DataSource specified by the DataSourceId that is associated
            with the DataSet CatalogItem.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSource'
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    put:
      tags:
      - DataSets
      summary: Updates the DataSource specified by the DataSourceId that is associated
        with the DataSet.
      operationId: SetDataSetDataSource
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      - name: DataSourceId
        in: path
        description: The Id of the DataSource associated with the DataSet.
        required: true
        schema:
          type: string
      requestBody:
        description: Updated definition for the DataSource associated with the DataSet.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataSource'
        required: true
      responses:
        204:
          description: No Content.
          content: {}
        400:
          description: Couldn't understand your request.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: DataSource
  /DataSets({Id})/DependentItems:
    get:
      tags:
      - DataSets
      summary: Returns a list of CatalogItems that reference the specified DataSet.
      operationId: GetDataSetDependentItems
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: An array of CatalogItems dependent upon the specified DataSet.
          content:
            application/json:
              schema:
                title: ODataDependentItems
                type: object
                properties:
                  '@odata.context':
                    type: string
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/CatalogItem'
        400:
          description: Couldn't understand your request.
          content: {}
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /DataSets({Id})/Model.GetAggregatedValue:
    post:
      tags:
      - DataSets
      summary: Gets the value for the specified DataSet column using the given aggregation
        type.
      operationId: GetDataSetAggregatedValue
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      - name: ColumnName
        in: query
        description: The name of the DataSet column to aggregate the value for.
        required: true
        schema:
          type: string
      - name: Aggregation
        in: query
        description: The type of aggregation to use on the specified column. Values
          come from the KpiSharedDataItemAggregation enum.
        required: true
        schema:
          type: string
      requestBody:
        description: An array of DataSet parameters to use when executing the query.
        content:
          application/json:
            schema:
              title: DataSetAggregateValueParameters
              type: object
              properties:
                Parameters:
                  type: array
                  items:
                    $ref: '#/components/schemas/DataSetParameter'
        required: false
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  type: number
                  format: double
        400:
          description: Couldn't understand your request.
          content: {}
        404:
          description: Not Found.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: Parameters
  /DataSets({Id})/Model.GetData:
    post:
      tags:
      - DataSets
      summary: Gets the query results for the specified DataSet.
      operationId: GetDataSetData
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      - name: MaxRows
        in: query
        description: Specifies the maximum number of rows to return from the query.
        schema:
          type: number
          format: Int32
      requestBody:
        description: An array of DataSet parameters to use when executing the query.
        content:
          application/json:
            schema:
              title: DataSetDataParameters
              type: object
              properties:
                Parameters:
                  type: array
                  items:
                    $ref: '#/components/schemas/DataSetParameter'
        required: false
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                title: DataSetData
                type: object
                properties:
                  Name:
                    type: string
                  Rows:
                    type: array
                    items:
                      type: array
                      items:
                        type: string
                  Columns:
                    type: array
                    items:
                      title: DataSetColumns
                      type: object
                      properties:
                        Name:
                          type: string
                        Type:
                          type: string
        404:
          description: Not Found.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: Parameters
  /DataSets({Id})/Model.GetSchema:
    get:
      tags:
      - DataSets
      summary: Gets the schema for the specified DataSet.
      operationId: GetDataSetSchema
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: The schema for the DataSet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSetSchema'
        404:
          description: Not Found.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /DataSets({Id})/Model.Upload:
    post:
      tags:
      - DataSets
      summary: Does an efficient binary upload of a new or existing DataSet CatalogItem
        from a multipart/form-data request. Use of this API is recommended for files
        larger than 25 MB in size.
      operationId: UploadDataSet
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - File
              properties:
                File:
                  type: string
                  description: The file contents.
                  format: binary
        required: true
      responses:
        201:
          description: The definition of the DataSet that was just created without
            the content.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSet'
        400:
          description: Couldn't understand your request.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /DataSets({Id})/ParameterDefinitions:
    get:
      tags:
      - DataSets
      summary: Gets the ParameterDefinitions associated with the specified DataSet.
      operationId: GetDataSetParameterDefinitions
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: An array of ParameterDefinitions that are associated with the
            specified DataSet CatalogItem.
          content:
            application/json:
              schema:
                title: ODataReportParameterDefinitions
                type: object
                properties:
                  '@odata.context':
                    type: string
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/ReportParameterDefinition'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    patch:
      tags:
      - DataSets
      summary: Updates the ParameterDefinitions associated with the DataSet specified.
      operationId: UpdateDataSetParameterDefinitions
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: Updated definitions for the ParameterDefinitions associated with
          the DataSet, represented as ParameterDefinitionsPatch objects. It is only
          necessary to include properties to be updated. All other property valueswill
          be left unchanged.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ReportParameterDefinitionPatch'
        required: true
      responses:
        204:
          description: No Content
          content: {}
        400:
          description: Couldn't understand your request.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: ParameterDefinitions
  /DataSets({Id})/Policies:
    get:
      tags:
      - DataSets
      summary: Gets ItemPolicies associated with the specified DataSet CatalogItem.
      operationId: GetDataSetPolicies
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: An array of ItemPolicies that are associated with the specified
            DataSet CatalogItem.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemPolicy'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    put:
      tags:
      - DataSets
      summary: Replaces ItemPolicies associated with the specified DataSet item.
      operationId: SetDataSetPolicies
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: The ItemPolicy definitions that will be replaced.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ItemPolicy'
        required: true
      responses:
        200:
          description: Ok
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: ItemPolicy
  /DataSets({Id})/Properties:
    get:
      tags:
      - DataSets
      summary: Gets DataSet Properties (takes list of property names to retrieve the
        values)
      operationId: GetDatasetProperties
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      - name: properties
        in: query
        description: Names for the Properties to be returned.
        style: form
        explode: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                title: ODataProperties
                type: object
                properties:
                  '@odata.context':
                    type: string
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/Property'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    put:
      tags:
      - DataSets
      summary: Updates the DataSet Properties included in the given list.
      operationId: UpdateDatasetProperties
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: The Properties that will be updated.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Property'
        required: true
      responses:
        200:
          description: Ok
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: Properties
  /DataSources:
    get:
      tags:
      - DataSources
      summary: Gets an array of DataSource CatalogItems.
      operationId: GetDataSources
      parameters:
      - name: $top
        in: query
        description: Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
        schema:
          type: integer
      - name: $skip
        in: query
        description: Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
        schema:
          type: integer
      - name: $filter
        in: query
        description: Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
        schema:
          type: string
      - name: $count
        in: query
        description: Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
        schema:
          type: string
      - name: $orderBy
        in: query
        description: Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
        schema:
          type: string
      - name: $select
        in: query
        description: Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
        schema:
          type: string
      responses:
        200:
          description: OData array of DataSource CatalogItems
          content:
            application/json:
              schema:
                title: ODataDataSources
                type: object
                properties:
                  '@odata.context':
                    type: string
                  '@odata.count':
                    type: integer
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/DataSource'
        400:
          description: Couldn't understand your request.
          content: {}
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    post:
      tags:
      - DataSources
      summary: Creates a new DataSource CatalogItem.
      operationId: AddDataSource
      requestBody:
        description: The definition of the new DataSource CatalogItem.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataSource'
        required: true
      responses:
        201:
          description: The definition of the DataSource item that was just created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSource'
        400:
          description: Couldn't understand your request.
          content: {}
        409:
          description: Conflict. Item already exists.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: DataSource
  /DataSources/Model.CheckConnection:
    post:
      tags:
      - DataSources
      summary: Tests the connection for a data source. This method supports the direct
        testing of the unsaved data source.
      operationId: CheckNewDataSourceConnection
      requestBody:
        description: |-
          The definition of data source.  Must contain connectionstring, data provider, and credentials to connect to the data source.
          In case of embedded data sources, Name will be null.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataSource'
        required: true
      responses:
        200:
          description: A DataSourceCheckResult that contains the results of the check
            connection operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSourceCheckResult'
        400:
          description: Couldn't understand your request.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: dataSource
  /DataSources/Model.GetQueryFields:
    post:
      tags:
      - DataSources
      summary: Retrieves a dataset that contains the fields retrieved by the delivery
        query for a data-driven subscription.
      operationId: GetDataSourceQueryFields
      requestBody:
        content:
          application/json:
            schema:
              title: QueryFieldsRequest
              type: object
              properties:
                dataSource:
                  $ref: '#/components/schemas/DataSource'
                query:
                  $ref: '#/components/schemas/Query'
        required: false
      responses:
        200:
          description: Ok.
          content:
            application/json:
              schema:
                title: ODataQueryFields
                type: object
                properties:
                  '@odata.context':
                    type: string
                  value:
                    type: array
                    items:
                      type: string
        400:
          description: Couldn't understand your request.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: QueryFieldsRequest
  /DataSources({Id}):
    get:
      tags:
      - DataSources
      summary: Gets a DataSource CatalogItem specified by the Id.
      operationId: GetDataSource
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: The DataSource CatalogItem specified by the Id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSource'
        400:
          description: Couldn't understand your request.
          content: {}
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    delete:
      tags:
      - DataSources
      summary: Deletes the specified DataSource.
      operationId: DeleteDataSource
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    patch:
      tags:
      - DataSources
      summary: Updates the DataSource CatalogItem specified by the Id using the provided
        definition.
      operationId: UpdateDataSource
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: Definition of the DataSource item that updates the current item
          on the server. It is only necessary to include properties to be updated.
          All other property values on the CatalogItem will be left unchanged.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataSource'
        required: true
      responses:
        204:
          description: No Content
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: DataSource
  /DataSources({Id})/AllowedActions:
    get:
      tags:
      - DataSources
      summary: Gets a list of actions allowed in the current session; user permissions
        and product edition capabilities are considered when querying.
      operationId: GetDataSourceAllowedActions
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok.
          content:
            application/json:
              schema:
                title: ODataAllowedActions
                type: object
                properties:
                  '@odata.context':
                    type: string
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/AllowedAction'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /DataSources({Id})/Content/$value:
    get:
      tags:
      - DataSources
      summary: Gets the content of the DataSource CatalogItem specified by the Id.
      operationId: GetDataSourceContent
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: The content of the DataSource CatalogItem specified by the
            Id.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/odata.error'
  /DataSources({Id})/DependentItems:
    get:
      tags:
      - DataSources
      summary: Returns a list of CatalogItems that reference the DataSource specified
        by the Id.
      operationId: GetDataSourceDependentItems
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok.
          content:
            application/json:
              schema:
                title: ODataDependentItems
                type: object
                properties:
                  '@odata.context':
                    type: string
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/CatalogItem'
        400:
          description: Couldn't understand your request.
          content: {}
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /DataSources({Id})/Model.CheckConnection:
    post:
      tags:
      - DataSources
      summary: Tests the connection for a data source. This method supports the testing
        of published data sources that are used by reports and shared data sources
      operationId: CheckExistingDataSourceConnection
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: A DataSourceCheckResult that contains the results of the check
            connection operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSourceCheckResult'
        400:
          description: Couldn't understand your request.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /DataSources({Id})/Model.Upload:
    post:
      tags:
      - DataSources
      summary: Does an efficient binary upload of a new or existing DataSource CatalogItem
        from a multipart/form-data request. Use of this API is recommended for files
        larger than 25 MB in size.
      operationId: UploadDataSource
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - File
              properties:
                File:
                  type: string
                  description: The file contents.
                  format: binary
        required: true
      responses:
        201:
          description: The definition of the DataSource that was just created without
            the content.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSource'
        400:
          description: Couldn't understand your request.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /DataSources({Id})/Policies:
    get:
      tags:
      - DataSources
      summary: Gets ItemPolicies associated with the DataSource specified by the Id.
      operationId: GetDataSourcePolicies
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemPolicy'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    put:
      tags:
      - DataSources
      summary: Replaces ItemPolicies associated with the DataSource specified by the
        Id.
      operationId: SetDataSourcePolicies
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: The ItemPolicy definitions that will be replaced.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ItemPolicy'
        required: true
      responses:
        200:
          description: Ok
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: ItemPolicy
  /DataSources({Id})/Properties:
    get:
      tags:
      - DataSources
      summary: Gets DataSource Properties (takes list of property names to retrieve
        the values)
      operationId: GetDatasourceProperties
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      - name: properties
        in: query
        description: Names for the Properties to be returned.
        style: form
        explode: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        200:
          description: Ok.
          content:
            application/json:
              schema:
                title: ODataProperties
                type: object
                properties:
                  '@odata.context':
                    type: string
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/Property'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    put:
      tags:
      - DataSources
      summary: Updates the DataSource Properties included in the given list.
      operationId: UpdateDatasourceProperties
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: The Properties that will be updated.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Property'
        required: true
      responses:
        200:
          description: Ok
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: Properties
  /ExcelWorkbooks:
    get:
      tags:
      - ExcelWorkbooks
      summary: Gets an array of ExcelWorkbook CatalogItems.
      operationId: GetExcelWorkbooks
      parameters:
      - name: $top
        in: query
        description: Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
        schema:
          type: integer
      - name: $skip
        in: query
        description: Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
        schema:
          type: integer
      - name: $filter
        in: query
        description: Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
        schema:
          type: string
      - name: $count
        in: query
        description: Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
        schema:
          type: string
      - name: $orderBy
        in: query
        description: Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
        schema:
          type: string
      - name: $select
        in: query
        description: Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
        schema:
          type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                title: ODataExcelWorkbooks
                type: object
                properties:
                  '@odata.context':
                    type: string
                  '@odata.count':
                    type: integer
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/ExcelWorkbook'
        400:
          description: Couldn't understand your request.
          content: {}
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    post:
      tags:
      - ExcelWorkbooks
      summary: Creates a new ExcelWorkbook CatalogItem.
      operationId: AddExcelWorkbook
      requestBody:
        description: The definition of the new ExcelWorkbook CatalogItem.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExcelWorkbook'
        required: true
      responses:
        201:
          description: The definition of the ExcelWorkbook that was just created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExcelWorkbook'
        400:
          description: Couldn't understand your request.
          content: {}
        409:
          description: Conflict. Item already exists.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: ExcelWorkbook
  /ExcelWorkbooks({Id}):
    get:
      tags:
      - ExcelWorkbooks
      summary: Gets the ExcelWorkbook CatalogItem specified by the Id.
      operationId: GetExcelWorkbook
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: The ExcelWorkbook CatalogItem specified by the Id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExcelWorkbook'
        400:
          description: Couldn't understand your request.
          content: {}
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    delete:
      tags:
      - ExcelWorkbooks
      summary: Deletes the specified ExcelWorkbook.
      operationId: DeleteExcelWorkbook
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    patch:
      tags:
      - ExcelWorkbooks
      summary: Updates the specified ExcelWorkbook CatalogItem using the provided
        definition.
      operationId: UpdateExcelWorkbook
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: Definition of the ExcelWorkbook item that updates the current
          item on the server. It is only necessary to include properties to be updated.
          All other property values on the CatalogItem will be left unchanged.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExcelWorkbook'
        required: true
      responses:
        204:
          description: No Content
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: ExcelWorkbook
  /ExcelWorkbooks({Id})/AllowedActions:
    get:
      tags:
      - ExcelWorkbooks
      summary: Gets a list of actions allowed in the current session, user permissions
        and product edition capabilities are considered when querying.
      operationId: GetExcelWorkbookAllowedActions
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok.
          content:
            application/json:
              schema:
                title: ODataAllowedActions
                type: object
                properties:
                  '@odata.context':
                    type: string
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/AllowedAction'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /ExcelWorkbooks({Id})/Comments:
    get:
      tags:
      - ExcelWorkbooks
      summary: Gets the Comments for a ExcelWorkbook specified by the Id.
      operationId: GetExcelWorkbookComments
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: A collection of Comments associated to the ExcelWorkbook
          content:
            application/json:
              schema:
                title: ODataComments
                type: object
                properties:
                  '@odata.context':
                    type: string
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    post:
      tags:
      - ExcelWorkbooks
      summary: Creates a new Comment associated to the specified ExcelWorkbook.
      operationId: AddExcelWorkbookComment
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: The Comment to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      responses:
        204:
          description: No Content
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: Comment
  /ExcelWorkbooks({Id})/Comments({CommentId}):
    put:
      tags:
      - ExcelWorkbooks
      summary: Updates the Comment specified by CommentId in the associated ExcelWorkbook.
      operationId: UpdateExcelWorkbookComment
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      - name: CommentId
        in: path
        description: The Id of the Comment.
        required: true
        schema:
          type: string
      requestBody:
        description: The Comment to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      responses:
        204:
          description: No Content
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: Comment
    delete:
      tags:
      - ExcelWorkbooks
      summary: Deletes the specified Comment associated to the ExcelWorkbook.
      operationId: DeleteExcelWorkbookComment
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      - name: CommentId
        in: path
        description: The Id of the Comment.
        required: true
        schema:
          type: string
      responses:
        204:
          description: No Content
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /ExcelWorkbooks({Id})/Content/$value:
    get:
      tags:
      - ExcelWorkbooks
      summary: Gets the content of the specified ExcelWorkbook CatalogItem specified
        by the Id.
      operationId: GetExcelWorkbookContent
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: The content of the ExcelWorkbook CatalogItem specified by the
            Id.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/odata.error'
  /ExcelWorkbooks({Id})/Model.Upload:
    post:
      tags:
      - ExcelWorkbooks
      summary: Creates a new ExcelWorkbook CatalogItem from a multipart/form-data
        request. Use of this API is recommended for files larger than 25 MB in size.
      operationId: UploadExcelWorkbook
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - File
              properties:
                File:
                  type: string
                  description: The file contents.
                  format: binary
        required: true
      responses:
        201:
          description: The definition of the ExcelWorkbook that was just created without
            the content.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExcelWorkbook'
        400:
          description: Couldn't understand your request.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /ExcelWorkbooks({Id})/Policies:
    get:
      tags:
      - ExcelWorkbooks
      summary: Gets policies associated with the specified ExcelWorkbook CatalogItem.
      operationId: GetExcelWorkbookPolicies
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: An array of ItemPolicies that are associated with the specified
            ExcelWorkbook CatalogItem.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemPolicy'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    put:
      tags:
      - ExcelWorkbooks
      summary: Replaces ItemPolicies associated with the specified ExcelWorkbook item.
      operationId: SetExcelWorkbookPolicies
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: The ItemPolicy definitions that will be replaced.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ItemPolicy'
        required: true
      responses:
        200:
          description: Ok
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: ItemPolicy
  /ExcelWorkbooks({Id})/Properties:
    get:
      tags:
      - ExcelWorkbooks
      summary: Gets ExcelWorkbook properties (takes list of property names to retrieve
        the values)
      operationId: GetExcelWorkbookProperties
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      - name: properties
        in: query
        description: Names for the properties to be returned.
        style: form
        explode: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                title: ODataProperties
                type: object
                properties:
                  '@odata.context':
                    type: string
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/Property'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    put:
      tags:
      - ExcelWorkbooks
      summary: Updates the ExcelWorkbook properties included in the given list.
      operationId: UpdateExcelWorkbookProperties
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: The properties that will be updated.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Property'
        required: true
      responses:
        200:
          description: Ok
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: Properties
  /Extensions:
    get:
      tags:
      - Extensions
      summary: Retreives all Extension items.
      operationId: GetExtensions
      responses:
        200:
          description: A array of Extension objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Extension'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /Extensions/Model.ValidateExtensionSettings:
    post:
      tags:
      - Extensions
      summary: Validates extension parameters and returns collection of ExtensionParameter.
      operationId: ValidateExtensionParameters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExtensionSettings'
        required: false
      responses:
        200:
          description: A array of ExtensionParameter objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExtensionParameter'
        400:
          description: Couldn't understand your request.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: ExtensionSettings
  /Extensions({Id})/Parameters:
    get:
      tags:
      - Extensions
      summary: Retrieves the ExtensionParameter list for given extension.
      operationId: GetExtensionParameters
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: A array of ExtensionParameter objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExtensionParameter'
        400:
          description: Couldn't understand your request.
          content: {}
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /FavoriteItems:
    get:
      tags:
      - FavoriteItems
      summary: Retrieves a collection of items of type CatalogItem which have been
        designated as favorites. Use the OData $expand option to also get the referenced
        items.
      operationId: GetFavoriteItems
      parameters:
      - name: $top
        in: query
        description: Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
        schema:
          type: integer
      - name: $skip
        in: query
        description: Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
        schema:
          type: integer
      - name: $filter
        in: query
        description: Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
        schema:
          type: string
      - name: $count
        in: query
        description: Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
        schema:
          type: string
      - name: $orderBy
        in: query
        description: Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
        schema:
          type: string
      - name: $expand
        in: query
        description: Expand related entities, see [OData Expand](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374621)
        schema:
          type: string
      - name: $select
        in: query
        description: Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
        schema:
          type: string
      responses:
        200:
          description: A array of items that have been designated as favorites.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FavoriteItem'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    post:
      tags:
      - FavoriteItems
      summary: Designate a CatalogItem as a favorite.
      operationId: SetFavoriteItem
      requestBody:
        description: The reference to the CatalogItem to be designated as a favorite.
          It only needs the Id property. Thus, it is not necessary to provide Item
          property in the payload.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FavoriteItem'
        required: true
      responses:
        201:
          description: Created entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteItem'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: FavoriteItem
  /FavoriteItems({Id}):
    delete:
      tags:
      - FavoriteItems
      summary: Removes a CatalogItem from the list of favorite items.
      operationId: RemoveFavoriteItem
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        204:
          description: No Content
          content: {}
        400:
          description: Couldn't understand your request.
          content: {}
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /Folders:
    get:
      tags:
      - Folders
      summary: Gets an array of Folder CatalogItems.
      operationId: GetFolders
      parameters:
      - name: $top
        in: query
        description: Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
        schema:
          type: integer
      - name: $skip
        in: query
        description: Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
        schema:
          type: integer
      - name: $filter
        in: query
        description: Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
        schema:
          type: string
      - name: $count
        in: query
        description: Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
        schema:
          type: string
      - name: $orderBy
        in: query
        description: Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
        schema:
          type: string
      - name: $select
        in: query
        description: Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
        schema:
          type: string
      responses:
        200:
          description: OData array of Folder CatalogItems.
          content:
            application/json:
              schema:
                title: ODataFolders
                type: object
                properties:
                  '@odata.context':
                    type: string
                  '@odata.count':
                    type: integer
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/Folder'
        400:
          description: Couldn't understand your request.
          content: {}
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    post:
      tags:
      - Folders
      summary: Creates a new Folder CatalogItem.
      operationId: AddFolder
      requestBody:
        description: The definition of the new Folder CatalogItem.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Folder'
        required: true
      responses:
        201:
          description: The definition of the Folder item that was just created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder'
        400:
          description: Couldn't understand your request.
          content: {}
        409:
          description: Conflict. Item already exists.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: body
  /Folders({Id}):
    get:
      tags:
      - Folders
      summary: Gets a Folder CatalogItem specified by the Id.
      operationId: GetFolder
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: The Folder CatalogItem specified by the Id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder'
        400:
          description: Couldn't understand your request.
          content: {}
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    delete:
      tags:
      - Folders
      summary: Deletes the specified Folder.
      operationId: DeleteFolder
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    patch:
      tags:
      - Folders
      summary: Updates the specified Folder CatalogItem using the provided definition.
      operationId: UpdateFolder
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: Definition of the Folder item that updates the current item on
          the server. It is only necessary to include properties to be updated. All
          other property values on the CatalogItem will be left unchanged.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Folder'
        required: true
      responses:
        204:
          description: No Content
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: Folder
  /Folders({Id})/AllowedActions:
    get:
      tags:
      - Folders
      summary: Gets a list of actions allowed in the current session; user permissions
        and product edition capabilities are considered when querying.
      operationId: GetFolderAllowedActions
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok.
          content:
            application/json:
              schema:
                title: ODataAllowedActions
                type: object
                properties:
                  '@odata.context':
                    type: string
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/AllowedAction'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /Folders({Id})/CatalogItems:
    get:
      tags:
      - Folders
      summary: Gets a list of child CatalogItems in the specified folder.
      operationId: GetFolderCatalogItems
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok.
          content:
            application/json:
              schema:
                title: ODataCatalogItems
                type: object
                properties:
                  '@odata.context':
                    type: string
                  '@odata.count':
                    type: integer
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/CatalogItem'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /Folders({Id})/Model.SearchItems(searchText='{searchText}'):
    post:
      tags:
      - Folders
      summary: Searches items in a given folder.
      operationId: SearchCatalogItemsInFolder
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      - name: searchText
        in: path
        description: Name of item to search in the folder.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                title: ODataCatalogItems
                type: object
                properties:
                  '@odata.context':
                    type: string
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/CatalogItem'
        400:
          description: Couldn't understand your request.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /Folders({Id})/Policies:
    get:
      tags:
      - Folders
      summary: Gets policies associated with the Folder CatalogItem specified by the
        Id.
      operationId: GetFolderPolicies
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: An array of ItemPolicies that are associated with the Folder
            CatalogItem specified by the Id.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemPolicy'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    put:
      tags:
      - Folders
      summary: Replaces ItemPolicies associated with the Folder item specified by
        the Id.
      operationId: SetFolderPolicies
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: The ItemPolicy definitions that will be replaced.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ItemPolicy'
        required: true
      responses:
        200:
          description: Ok
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: ItemPolicy
  /Folders({Id})/Properties:
    get:
      tags:
      - Folders
      summary: Gets Folder Properties (takes list of Property names to retrieve the
        values)
      operationId: GetFolderProperties
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      - name: properties
        in: query
        description: Names for the Properties to be returned.
        style: form
        explode: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                title: ODataProperties
                type: object
                properties:
                  '@odata.context':
                    type: string
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/Property'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    put:
      tags:
      - Folders
      summary: Updates the Folder Properties included in the given list.
      operationId: UpdateFolderProperties
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: The Properties that will be updated.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Property'
        required: true
      responses:
        200:
          description: Ok
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: Properties
  /Kpis:
    get:
      tags:
      - Kpis
      summary: Gets an array of Kpi CatalogItems.
      operationId: GetKpis
      parameters:
      - name: $top
        in: query
        description: Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
        schema:
          type: integer
      - name: $skip
        in: query
        description: Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
        schema:
          type: integer
      - name: $filter
        in: query
        description: Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
        schema:
          type: string
      - name: $count
        in: query
        description: Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
        schema:
          type: string
      - name: $orderBy
        in: query
        description: Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
        schema:
          type: string
      - name: $select
        in: query
        description: Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
        schema:
          type: string
      responses:
        200:
          description: OData array of Kpi CatalogItems.
          content:
            application/json:
              schema:
                title: ODataKpis
                type: object
                properties:
                  '@odata.context':
                    type: string
                  '@odata.count':
                    type: integer
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/Kpi'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    post:
      tags:
      - Kpis
      summary: Creates a new Kpi CatalogItem.
      operationId: AddKpi
      requestBody:
        description: The definition of the new KPI CatalogItem.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Kpi'
        required: true
      responses:
        201:
          description: Created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Kpi'
        400:
          description: Couldn't understand your request.
          content: {}
        409:
          description: Conflict. Item already exists.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: Kpi
  /Kpis({Id}):
    get:
      tags:
      - Kpis
      summary: Gets a Kpi CatalogItem specified by the Id.
      operationId: GetKpi
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Kpi'
        400:
          description: Couldn't understand your request.
          content: {}
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    delete:
      tags:
      - Kpis
      summary: Deletes the specified Kpi.
      operationId: DeleteKpi
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    patch:
      tags:
      - Kpis
      summary: Updates the specified Kpi CatalogItem using the provided definition.
      operationId: UpdateKpi
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: Definition of the KPI item that updates the current item on the
          server. It is only necessary to include properties to be updated. All other
          property values will be left unchanged.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Kpi'
        required: true
      responses:
        204:
          description: No Content
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: Kpi
  /Kpis({Id})/AllowedActions:
    get:
      tags:
      - Kpis
      summary: Gets a list of actions allowed in the current session, user permissions
        and product edition capabilities are considered when querying.
      operationId: GetKpiAllowedActions
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok.
          content:
            application/json:
              schema:
                title: ODataAllowedActions
                type: object
                properties:
                  '@odata.context':
                    type: string
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/AllowedAction'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /Kpis({Id})/Policies:
    get:
      tags:
      - Kpis
      summary: Gets ItemPolicies associated with the Kpi CatalogItem specified by
        the Id.
      operationId: GetKpiPolicies
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: An array of ItemPolicies that are associated with the Kpi CatalogItem
            specified by the Id.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemPolicy'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    put:
      tags:
      - Kpis
      summary: Replaces ItemPolicies associated with the Kpi specified by the Id.
      operationId: SetKpiPolicies
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: The ItemPolicy definitions that will be replaced.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ItemPolicy'
        required: true
      responses:
        200:
          description: Ok
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: ItemPolicies
  /Kpis({Id})/Properties:
    get:
      tags:
      - Kpis
      summary: Gets Kpi Properties (takes list of Property names to retrieve the values)
      operationId: GetKpiProperties
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      - name: Properties
        in: query
        description: Names for the Properties to be returned.
        style: form
        explode: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                title: ODataProperties
                type: object
                properties:
                  '@odata.context':
                    type: string
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/Property'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    put:
      tags:
      - Kpis
      summary: Updates the Kpi Properties included in the given list.
      operationId: UpdateKpiProperties
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: The Properties that will be updated.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Property'
        required: true
      responses:
        200:
          description: Ok
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: Properties
  /LinkedReports:
    get:
      tags:
      - LinkedReports
      summary: Gets an array of LinkedReport CatalogItems.
      operationId: GetLinkedReports
      parameters:
      - name: $top
        in: query
        description: Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
        schema:
          type: integer
      - name: $skip
        in: query
        description: Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
        schema:
          type: integer
      - name: $filter
        in: query
        description: Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
        schema:
          type: string
      - name: $count
        in: query
        description: Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
        schema:
          type: string
      - name: $orderBy
        in: query
        description: Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
        schema:
          type: string
      - name: $select
        in: query
        description: Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
        schema:
          type: string
      responses:
        200:
          description: Ok.
          content:
            application/json:
              schema:
                title: ODataLinkedReports
                type: object
                properties:
                  '@odata.context':
                    type: string
                  '@odata.count':
                    type: integer
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/LinkedReport'
        400:
          description: Couldn't understand your request.
          content: {}
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    post:
      tags:
      - LinkedReports
      summary: Creates a new LinkedReport CatalogItem.
      operationId: AddLinkedReport
      requestBody:
        description: The definition of the new LinkedReport CatalogItem.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkedReport'
        required: true
      responses:
        201:
          description: Created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkedReport'
        400:
          description: Couldn't understand your request.
          content: {}
        409:
          description: Conflict. Item already exists.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: LinkedReport
  /LinkedReports({Id}):
    get:
      tags:
      - LinkedReports
      summary: Gets a LinkedReport CatalogItem specified by the Id.
      operationId: GetLinkedReport
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: The LinkedReport CatalogItem specified by the Id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkedReport'
        400:
          description: Couldn't understand your request.
          content: {}
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    delete:
      tags:
      - LinkedReports
      summary: Deletes the specified LinkedReport.
      operationId: DeleteLinkedReport
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    patch:
      tags:
      - LinkedReports
      summary: Updates the specified LinkedReport CatalogItem using the provided definition.
      operationId: UpdateLinkedReport
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: Definition of the LinkedReport item that updates the current
          item on the server. It is only necessary to include properties to be updated.
          All other property values on the CatalogItem will be left unchanged.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkedReport'
        required: true
      responses:
        204:
          description: No Content
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: LinkedReport
  /LinkedReports({Id})/AllowedActions:
    get:
      tags:
      - LinkedReports
      summary: Gets a list of actions allowed in the current session; user permissions
        and product edition capabilities are considered when querying.
      operationId: GetLinkedReportAllowedActions
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                title: ODataAllowedActions
                type: object
                properties:
                  '@odata.context':
                    type: string
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/AllowedAction'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /LinkedReports({Id})/CacheOptions:
    get:
      tags:
      - LinkedReports
      summary: Gets the content of CacheOptions for the LinkedReport specified by
        the Id.
      operationId: GetLinkedReportCacheOptions
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Returns the content of CacheOptions for the LinkedReport specified
            by the Id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CacheOptions'
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    put:
      tags:
      - LinkedReports
      summary: Replaces the CacheOption's content for a given LinkedReport using the
        provided definition.
      operationId: SetLinkedReportCacheOptions
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: Updated definition for the CacheOption's content associated with
          the LinkedReport specified by the Id.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CacheOptions'
        required: true
      responses:
        204:
          description: No Content
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: CacheOptions
  /LinkedReports({Id})/CacheRefreshPlans:
    get:
      tags:
      - LinkedReports
      summary: Gets the CacheRefreshPlans for a LinkedReport specified by the Id.
      operationId: GetLinkedReportCacheRefreshPlans
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Returns the CacheRefreshPlans for a LinkedReport specified
            by the Id.
          content:
            application/json:
              schema:
                title: ODataCacheRefreshPlans
                type: object
                properties:
                  '@odata.context':
                    type: string
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/CacheRefreshPlan'
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /LinkedReports({Id})/Comments:
    get:
      tags:
      - LinkedReports
      summary: Gets the Comments for a LinkedReport specified by the Id.
      operationId: GetLinkedReportComments
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: A collection of Comments associated to the LinkedReport
          content:
            application/json:
              schema:
                title: ODataComments
                type: object
                properties:
                  '@odata.context':
                    type: string
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    post:
      tags:
      - LinkedReports
      summary: Creates a new Comment associated to the specified LinkedReport.
      operationId: AddLinkedReportComment
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: The Comment to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      responses:
        204:
          description: No Content
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: Comment
  /LinkedReports({Id})/Comments({CommentId}):
    put:
      tags:
      - LinkedReports
      summary: Updates the Comment specified by CommentId in the associated LinkedReport.
      operationId: UpdateLinkedReportComment
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      - name: CommentId
        in: path
        description: The Id of the Comment.
        required: true
        schema:
          type: string
      requestBody:
        description: The Comment to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      responses:
        204:
          description: No Content
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: Comment
    delete:
      tags:
      - LinkedReports
      summary: Deletes the specified Comment associated to the LinkedReport.
      operationId: DeleteLinkedReportComment
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      - name: CommentId
        in: path
        description: The Id of the Comment.
        required: true
        schema:
          type: string
      responses:
        204:
          description: No Content
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /LinkedReports({Id})/HistorySnapshots:
    get:
      tags:
      - LinkedReports
      summary: Get a list of HistorySnapshots of the LinkedReport specified by Id.
      operationId: GetLinkedReportHistorySnapshots
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HistorySnapshot'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    post:
      tags:
      - LinkedReports
      summary: Creates new HistorySnapshot
      operationId: AddLinkedReportHistorySnapshot
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: boolean
                format: true|false
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /LinkedReports({Id})/HistorySnapshots({HistoryId}):
    get:
      tags:
      - LinkedReports
      summary: Gets requested HistorySnapshot item specified by HistoryId of the LinkedReport
        specified by Id.
      operationId: GetLinkedReportHistorySnapshot
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      - name: HistoryId
        in: path
        description: The Id property of the HistorySnapshot
        required: true
        schema:
          type: string
      responses:
        200:
          description: Returns a History Snapshot item.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HistorySnapshot'
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    delete:
      tags:
      - LinkedReports
      summary: Deletes a HistorySnapshot specified by HistoryId from the LinkedReport
        specified by Id.
      operationId: DeleteLinkedReportHistorySnapshot
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      - name: HistoryId
        in: path
        description: The Id property of the HistorySnapshot
        required: true
        schema:
          type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: boolean
                format: true|false
        400:
          description: Couldn't understand your request.
          content: {}
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /LinkedReports({Id})/HistorySnapshotOptions:
    get:
      tags:
      - LinkedReports
      summary: Gets HistorySnapshotOptions for the specified LinkedReport.
      operationId: GetLinkedReportHistorySnapshotOptions
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: History Snapshot Options
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HistorySnapshotOptions'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    put:
      tags:
      - LinkedReports
      summary: Updates HistorySnapshotOptions property.
      operationId: SetLinkedReportHistorySnapshotOptions
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: Modified HistorySnapshotOptions object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HistorySnapshotOptions'
        required: true
      responses:
        200:
          description: Ok
          content: {}
        400:
          description: Couldn't understand your request.
          content: {}
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: HistorySnapshotOptions
  /LinkedReports({Id})/ParameterDefinitions:
    get:
      tags:
      - LinkedReports
      summary: Gets the ParameterDefinitions associated with the LinkedReport specified
        by the Id.
      operationId: GetLinkedReportParameterDefinitions
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: An array of ParameterDefinitions that are associated with the
            LinkedReport CatalogItem specified by the Id.
          content:
            application/json:
              schema:
                title: ODataReportParameterDefinitions
                type: object
                properties:
                  '@odata.context':
                    type: string
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/ReportParameterDefinition'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    patch:
      tags:
      - LinkedReports
      summary: Updates the ParameterDefinitions associated with the specified LinkedReport
        by the Id.
      operationId: UpdateLinkedReportParameterDefinitions
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: Updated definitions for the ParameterDefinitions associated with
          the LinkedReport, represented as ParameterDefinitionsPatch objects. It is
          only necessary to include properties to be updated. All other property values
          will be left unchanged.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ReportParameterDefinitionPatch'
        required: true
      responses:
        204:
          description: No Content
          content: {}
        400:
          description: Couldn't understand your request.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: ParameterDefinitions
  /LinkedReports({Id})/Policies:
    get:
      tags:
      - LinkedReports
      summary: Gets ItemPolicies associated with the specified LinkedReport CatalogItem.
      operationId: GetLinkedReportPolicies
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: An array of ItemPolicies that are associated with the specified
            LinkedReport CatalogItem.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemPolicy'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    put:
      tags:
      - LinkedReports
      summary: Replaces ItemPolicies associated with the specified LinkedReport item.
      operationId: SetLinkedReportPolicies
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: The ItemPolicy definitions that will be replaced.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ItemPolicy'
        required: true
      responses:
        200:
          description: Ok
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: ItemPolicy
  /LinkedReports({Id})/Properties:
    get:
      tags:
      - LinkedReports
      summary: Gets LinkedReport Properties (takes list of Property names to retrieve
        the values)
      operationId: GetLinkedReportProperties
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      - name: properties
        in: query
        description: Names for the Properties to be returned.
        style: form
        explode: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                title: ODataProperties
                type: object
                properties:
                  '@odata.context':
                    type: string
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/Property'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    put:
      tags:
      - LinkedReports
      summary: Updates the LinkedReport Properties included in the given list.
      operationId: UpdateLinkedReportProperties
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: The Properties that will be updated.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Property'
        required: true
      responses:
        200:
          description: Ok
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: Properties
  /Me:
    get:
      tags:
      - Me
      summary: Gets the User object for the current user.
      operationId: GetUserDetails
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /MobileReports:
    get:
      tags:
      - MobileReports
      summary: Retrieve array of MobileReport catalog items.
      operationId: GetMobileReports
      parameters:
      - name: $top
        in: query
        description: Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
        schema:
          type: integer
      - name: $skip
        in: query
        description: Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
        schema:
          type: integer
      - name: $filter
        in: query
        description: Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
        schema:
          type: string
      - name: $count
        in: query
        description: Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
        schema:
          type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                title: ODataMobileReport
                type: object
                properties:
                  '@odata.context':
                    type: string
                  '@odata.count':
                    type: integer
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/MobileReport'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    post:
      tags:
      - MobileReports
      summary: Creates new MobileReport item
      operationId: AddMobileReport
      requestBody:
        description: The definition of the new MobileReport item.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MobileReport'
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MobileReport'
        409:
          description: Conflict. Item already exists.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: body
  /MobileReports({Id}):
    get:
      tags:
      - MobileReports
      summary: Fetch MobileReport item by Id or path property.
      operationId: GetMobileReport
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MobileReport'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    delete:
      tags:
      - MobileReports
      summary: Delete the specified MobileReport.
      operationId: DeleteMobileReport
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    patch:
      tags:
      - MobileReports
      summary: Updates the specified MobileReport CatalogItem using the provided definition.
      operationId: UpdateMobileReport
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: Definition of the MobileReport item that replaces the current
          item on the server. It is only necessary to include properties to be updated.
          All other property values on the CatalogItem will be left unchanged.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MobileReport'
        required: true
      responses:
        204:
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MobileReport'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: body
  /MobileReports({Id})/AllowedActions:
    get:
      tags:
      - MobileReports
      summary: Gets a list of actions allowed in the current session; considering
        user permissions and product edition capabilities.
      operationId: GetMobileReportAllowedActions
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                title: ODataAllowedActions
                type: object
                properties:
                  '@odata.context':
                    type: string
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/AllowedAction'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /MobileReports({Id})/Comments:
    get:
      tags:
      - MobileReports
      summary: Gets the Comments for a MobileReport specified by the Id.
      operationId: GetMobileReportComments
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: A collection of Comments associated to the MobileReport
          content:
            application/json:
              schema:
                title: ODataComments
                type: object
                properties:
                  '@odata.context':
                    type: string
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    post:
      tags:
      - MobileReports
      summary: Creates a new Comment associated to the specified MobileReport.
      operationId: AddMobileReportComment
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: The Comment to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      responses:
        204:
          description: No Content
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: Comment
  /MobileReports({Id})/Comments({CommentId}):
    put:
      tags:
      - MobileReports
      summary: Updates the Comment specified by CommentId in the associated MobileReport.
      operationId: UpdateMobileReportComment
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      - name: CommentId
        in: path
        description: The Id of the Comment.
        required: true
        schema:
          type: string
      requestBody:
        description: The Comment to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      responses:
        204:
          description: No Content
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: Comment
    delete:
      tags:
      - MobileReports
      summary: Deletes the specified Comment associated to the MobileReport.
      operationId: DeleteMobileReportComment
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      - name: CommentId
        in: path
        description: The Id of the Comment.
        required: true
        schema:
          type: string
      responses:
        204:
          description: No Content
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /MobileReports({Id})/Content/$value:
    get:
      tags:
      - MobileReports
      summary: Gets the content of the specified MobileReport CatalogItem.
      operationId: GetMobileReportContent
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: The content of the specified MobileReport CatalogItem.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/odata.error'
  /MobileReports({Id})/Model.Upload:
    post:
      tags:
      - MobileReports
      summary: Does an efficient binary upload of a new or existing MobileReport CatalogItem
        from a multipart/form-data request. Use of this API is recommended for files
        larger than 25 MB in size.
      operationId: UploadMobileReport
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - File
              properties:
                File:
                  type: string
                  description: The file contents.
                  format: binary
        required: true
      responses:
        201:
          description: The definition of the MobileReport that was just created without
            the content.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MobileReport'
        400:
          description: Couldn't understand your request.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /MobileReports({Id})/Policies:
    get:
      tags:
      - MobileReports
      summary: Gets ItemPolicies associated with the MobileReport catalog item.
      operationId: GetMobileReportPolicies
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemPolicy'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    put:
      tags:
      - MobileReports
      summary: Sets ItemPolicies on the MobileReport item.
      operationId: SetMobileReportPolicies
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: Array of ItemPolicies to set on the MobileReport CatalogItem.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ItemPolicy'
        required: true
      responses:
        200:
          description: Ok
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: MobileReports
  /MobileReports({Id})/Properties:
    get:
      tags:
      - MobileReports
      summary: Gets MobileReport Properties (takes list of Property names to retrieve
        the values)
      operationId: GetMobileReportProperties
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      - name: properties
        in: query
        description: Names for the Properties to be returned.
        style: form
        explode: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                title: ODataProperties
                type: object
                properties:
                  '@odata.context':
                    type: string
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/Property'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    put:
      tags:
      - MobileReports
      summary: Updates the MobileReport properties included in the given list.
      operationId: UpdateMobileReportProperties
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: The Properties that will be updated.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Property'
        required: true
      responses:
        200:
          description: Ok
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: Properties
  /PowerBIReports:
    get:
      tags:
      - PowerBIReports
      summary: Gets an array of PowerBIReport CatalogItems.
      operationId: GetPowerBIReports
      parameters:
      - name: $top
        in: query
        description: Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
        schema:
          type: integer
      - name: $skip
        in: query
        description: Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
        schema:
          type: integer
      - name: $filter
        in: query
        description: Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
        schema:
          type: string
      - name: $count
        in: query
        description: Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
        schema:
          type: string
      - name: $orderBy
        in: query
        description: Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
        schema:
          type: string
      - name: $select
        in: query
        description: Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
        schema:
          type: string
      responses:
        200:
          description: OData array of PowerBIReport CatalogItems.
          content:
            application/json:
              schema:
                title: ODataPowerBIReports
                type: object
                properties:
                  '@odata.context':
                    type: string
                  '@odata.count':
                    type: integer
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/PowerBIReport'
        400:
          description: Couldn't understand your request.
          content: {}
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    post:
      tags:
      - PowerBIReports
      summary: Creates a new PowerBIReport CatalogItem.
      operationId: AddPowerBIReport
      requestBody:
        description: The definition of the new PowerBIReport CatalogItem.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PowerBIReport'
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PowerBIReport'
        400:
          description: Couldn't understand your request.
          content: {}
        409:
          description: Conflict. Item already exists.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: PowerBIReport
  /PowerBIReports({Id}):
    get:
      tags:
      - PowerBIReports
      summary: Gets a PowerBIReport CatalogItem specified by the Id.
      operationId: GetPowerBIReport
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PowerBIReport'
        400:
          description: Couldn't understand your request.
          content: {}
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    delete:
      tags:
      - PowerBIReports
      summary: Deletes the specified PowerBIReport.
      operationId: DeletePowerBIReport
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    patch:
      tags:
      - PowerBIReports
      summary: Updates the specified PowerBIReport CatalogItem using the provided
        definition.
      operationId: UpdatePowerBIReport
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: Definition of the PowerBIReport item that updates the current
          item on the server. It is only necessary to include properties to be updated.
          All other property values on the CatalogItem will be left unchanged.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PowerBIReport'
        required: true
      responses:
        204:
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PowerBIReport'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: PowerBIReport
  /PowerBIReports({Id})/AllowedActions:
    get:
      tags:
      - PowerBIReports
      summary: Gets a list of actions allowed in the current session; user permissions
        and product edition capabilities are considered when querying.
      operationId: GetPowerBIReportAllowedActions
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                title: ODataAllowedActions
                type: object
                properties:
                  '@odata.context':
                    type: string
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/AllowedAction'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /PowerBIReports({Id})/CacheRefreshPlans:
    get:
      tags:
      - PowerBIReports
      summary: Gets the CacheRefreshPlans for a given Power BI Report.
      operationId: GetPowerBICacheRefreshPlans
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok.
          content:
            application/json:
              schema:
                title: ODataCacheRefreshPlans
                type: object
                properties:
                  '@odata.context':
                    type: string
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/CacheRefreshPlan'
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /PowerBIReports({Id})/Comments:
    get:
      tags:
      - PowerBIReports
      summary: Gets the Comments for a PowerBIReport specified by the Id.
      operationId: GetPowerBIReportComments
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: A collection of Comments associated to the PowerBIReport
          content:
            application/json:
              schema:
                title: ODataComments
                type: object
                properties:
                  '@odata.context':
                    type: string
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    post:
      tags:
      - PowerBIReports
      summary: Creates a new Comment associated to the specified PowerBIReport.
      operationId: AddPowerBIReportComment
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: The Comment to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      responses:
        204:
          description: No Content
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: Comment
  /PowerBIReports({Id})/Comments({CommentId}):
    put:
      tags:
      - PowerBIReports
      summary: Updates the Comment specified by CommentId in the associated PowerBIReport.
      operationId: UpdatePowerBIReportComment
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      - name: CommentId
        in: path
        description: The Id of the Comment.
        required: true
        schema:
          type: string
      requestBody:
        description: The Comment to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      responses:
        204:
          description: No Content
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: Comment
    delete:
      tags:
      - PowerBIReports
      summary: Deletes the specified Comment associated to the PowerBIReport.
      operationId: DeletePowerBIReportComment
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      - name: CommentId
        in: path
        description: The Id of the Comment.
        required: true
        schema:
          type: string
      responses:
        204:
          description: No Content
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /PowerBIReports({Id})/Content/$value:
    get:
      tags:
      - PowerBIReports
      summary: Gets the content of the specified PowerBIReport CatalogItem.
      operationId: GetPowerBIReportContent
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/odata.error'
  /PowerBIReports({Id})/DataSources:
    get:
      tags:
      - PowerBIReports
      summary: Gets the DataSources that are associated with the specified PowerBIReport.
      operationId: GetPowerBIReportDataSources
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                title: ODataDataSources
                type: object
                properties:
                  '@odata.context':
                    type: string
                  '@odata.count':
                    type: integer
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/DataSource'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    patch:
      tags:
      - PowerBIReports
      summary: Updates the DataSource definition associated with the PowerBIReport
        specified by the Id.
      operationId: UpdatePowerBIReportDataSource
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: Updated definition for the DataSource associated with the PowerBIReport
          specified by the Id.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DataSource'
        required: true
      responses:
        200:
          description: OK
          content: {}
        400:
          description: Couldn't understand your request.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: DataSources
  /PowerBIReports({Id})/DataModelParameters:
    get:
      tags:
      - PowerBIReports
      summary: Gets the data model parameters that are associated with the specified
        PowerBIReport.
      description: Added in October 2020 Release
      operationId: GetPowerBIReportDataModelParameters
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                title: ODataDataModelParameters
                type: object
                properties:
                  '@odata.context':
                    type: string
                  '@odata.count':
                    type: integer
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/DataModelParameter'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    post:
      tags:
      - PowerBIReports
      summary: Updates the data model parameters that are associated with the specified
        PowerBIReport. If any datasources are updated based on parameters, they can
        be fetched with DataSources api.
      description: Added in October 2020 Release
      operationId: UpdatePowerBIReportDataModelParameters
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: Updated data model parameters associated with the specified PowerBIReport.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DataModelParameter'
        required: true
      responses:
        200:
          description: OK
          content: {}
        400:
          description: An error with the payload, or one of the parameters does not
            exist in the report.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: DataModelParameters
  /PowerBIReports({Id})/DataModelRoles:
    get:
      tags:
      - PowerBIReports
      summary: Gets the data model roles that are associated with the specified PowerBIReport.
      description: Added in January 2019 Release
      operationId: GetPowerBIReportDataModelRoles
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                title: ODataDataModelRoles
                type: object
                properties:
                  '@odata.context':
                    type: string
                  '@odata.count':
                    type: integer
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/DataModelRole'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /PowerBIReports({Id})/DataModelRoleAssignments:
    get:
      tags:
      - PowerBIReports
      summary: Gets the data model role assignments that are associated with the specified
        PowerBIReport.
      description: Added in January 2019 Release
      operationId: GetPowerBIReportDataModelRoleAssignments
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                title: ODataDataModelRoleAssignments
                type: object
                properties:
                  '@odata.context':
                    type: string
                  '@odata.count':
                    type: integer
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/DataModelRoleAssignment'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    put:
      tags:
      - PowerBIReports
      summary: Replaces the data model role assignments that are associated with the
        specified PowerBIReport.
      description: Added in January 2019 Release
      operationId: ReplacePowerBIReportDataModelRoleAssignments
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: Updated data model role assignments associated with the specified
          PowerBIReport.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DataModelRoleAssignment'
        required: true
      responses:
        200:
          description: OK
          content: {}
        400:
          description: Couldn't understand your request.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: DataModelRoleAssignments
  /PowerBIReports({Id})/Model.CheckDataSourceConnection:
    post:
      tags:
      - PowerBIReports
      summary: Checks the status of the specified DataSource connection.
      operationId: CheckPowerBIReportDataSourceConnection
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: The name of the DataSource to check.
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSourceCheckResult'
        400:
          description: Couldn't understand your request.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: DataSourceName
  /PowerBIReports({Id})/Model.Upload:
    post:
      tags:
      - PowerBIReports
      summary: Does an efficient binary upload of a new or existing PowerBIReport
        CatalogItem from a multipart/form-data request. Use of this API is recommended
        for files larger than 25 MB in size.
      operationId: UploadPowerBIReport
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - File
              properties:
                File:
                  type: string
                  description: The file contents.
                  format: binary
        required: true
      responses:
        201:
          description: The definition of the PowerBIReport that was just created without
            the content.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PowerBIReport'
        400:
          description: Couldn't understand your request.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /PowerBIReports({Id})/Policies:
    get:
      tags:
      - PowerBIReports
      summary: Gets ItemPolicies associated with the specified PowerBIReport CatalogItem.
      operationId: GetPowerBIReportPolicies
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemPolicy'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    put:
      tags:
      - PowerBIReports
      summary: Replaces ItemPolicies associated with the specified PowerBIReport item.
      operationId: SetPowerBIReportPolicies
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: The ItemPolicy definitions that will be replaced.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ItemPolicy'
        required: true
      responses:
        200:
          description: Ok
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: ItemPolicies
  /PowerBIReports({Id})/Properties:
    get:
      tags:
      - PowerBIReports
      summary: Gets PowerBIReports Properties (takes list of Property names to retrieve
        the values)
      operationId: GetPowerBIReportProperties
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      - name: properties
        in: query
        description: Names for the Properties to be returned.
        style: form
        explode: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                title: ODataProperties
                type: object
                properties:
                  '@odata.context':
                    type: string
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/Property'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    put:
      tags:
      - PowerBIReports
      summary: Updates the PowerBIReport Properties included in the given list.
      operationId: UpdatePowerBIReportProperties
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: The Properties that will be updated.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Property'
        required: true
      responses:
        200:
          description: Ok
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: Properties
  /Reports:
    get:
      tags:
      - Reports
      summary: Gets an array of Report CatalogItems.
      operationId: GetReports
      parameters:
      - name: $top
        in: query
        description: Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
        schema:
          type: integer
      - name: $skip
        in: query
        description: Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
        schema:
          type: integer
      - name: $filter
        in: query
        description: Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
        schema:
          type: string
      - name: $count
        in: query
        description: Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
        schema:
          type: string
      - name: $orderBy
        in: query
        description: Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
        schema:
          type: string
      - name: $select
        in: query
        description: Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
        schema:
          type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                title: ODataReports
                type: object
                properties:
                  '@odata.context':
                    type: string
                  '@odata.count':
                    type: integer
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/Report'
        400:
          description: Couldn't understand your request.
          content: {}
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    post:
      tags:
      - Reports
      summary: Creates a new Report CatalogItem.
      operationId: AddReport
      requestBody:
        description: The definition of the new Report CatalogItem.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Report'
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        400:
          description: Couldn't understand your request.
          content: {}
        409:
          description: Conflict. Item already exists.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: Report
  /Reports({Id}):
    get:
      tags:
      - Reports
      summary: Gets a Report CatalogItem specified by the Id.
      operationId: GetReport
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        400:
          description: Couldn't understand your request.
          content: {}
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    delete:
      tags:
      - Reports
      summary: Deletes the specified Report.
      operationId: DeleteReport
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    patch:
      tags:
      - Reports
      summary: Updates the specified Report CatalogItem using the provided definition.
      operationId: UpdateReport
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: Definition of the Report item that updates the current item on
          the server. It is only necessary to include properties to be updated. All
          other property values on the CatalogItem will be left unchanged.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Report'
        required: true
      responses:
        204:
          description: No Content
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: Report
  /Reports({Id})/AllowedActions:
    get:
      tags:
      - Reports
      summary: Gets a list of actions allowed in the current session; user permissions
        and product edition capabilities are considered when querying.
      operationId: GetReportAllowedActions
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                title: ODataAllowedActions
                type: object
                properties:
                  '@odata.context':
                    type: string
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/AllowedAction'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /Reports({Id})/CacheOptions:
    get:
      tags:
      - Reports
      summary: Gets the content of CacheOptions for the Report specified by the Id
      operationId: GetReportCacheOptions
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CacheOptions'
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    put:
      tags:
      - Reports
      summary: Replaces the CacheOptions content for a given Report using the provided
        definition.
      operationId: SetReportCacheOptions
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: Updated definition for the CacheOptions content associated with
          the given Report.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CacheOptions'
        required: true
      responses:
        204:
          description: No Content
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: CacheOptions
  /Reports({Id})/CacheRefreshPlans:
    get:
      tags:
      - Reports
      summary: Gets the CacheRefreshPlans for the Report specified by the Id
      operationId: GetReportCacheRefreshPlans
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                title: ODataCacheRefreshPlans
                type: object
                properties:
                  '@odata.context':
                    type: string
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/CacheRefreshPlan'
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /Reports({Id})/Comments:
    get:
      tags:
      - Reports
      summary: Gets the Comments for a Report specified by the Id.
      operationId: GetReportComments
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: A collection of Comments associated to the Report
          content:
            application/json:
              schema:
                title: ODataComments
                type: object
                properties:
                  '@odata.context':
                    type: string
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    post:
      tags:
      - Reports
      summary: Creates a new Comment associated to the specified Report.
      operationId: AddReportComment
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: The Comment to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      responses:
        204:
          description: No Content
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: Comment
  /Reports({Id})/Comments({CommentId}):
    put:
      tags:
      - Reports
      summary: Updates the Comment specified by CommentId in the associated Report.
      operationId: UpdateReportComment
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      - name: CommentId
        in: path
        description: The Id of the Comment.
        required: true
        schema:
          type: string
      requestBody:
        description: The Comment to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      responses:
        204:
          description: No Content
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: Comment
    delete:
      tags:
      - Reports
      summary: Deletes the specified Comment associated to the Report.
      operationId: DeleteReportComment
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      - name: CommentId
        in: path
        description: The Id of the Comment.
        required: true
        schema:
          type: string
      responses:
        204:
          description: No Content
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /Reports({Id})/Content/$value:
    get:
      tags:
      - Reports
      summary: Gets the content of the specified Report CatalogItem specified by the
        Id.
      operationId: GetReportContent
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: The content of the Report CatalogItem specified by the Id.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/odata.error'
  /Reports({Id})/DataSources:
    get:
      tags:
      - Reports
      summary: Gets the DataSources associated with the Report specified by the Id.
      operationId: GetReportDataSources
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                title: ODataDataSources
                type: object
                properties:
                  '@odata.context':
                    type: string
                  '@odata.count':
                    type: integer
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/DataSource'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    put:
      tags:
      - Reports
      summary: Updates the DataSource definition associated with the Report specified
        by the Id.
      operationId: SetReportDataSource
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: Updated definition for the DataSource associated with the Report
          specified by the Id.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataSource'
        required: true
      responses:
        200:
          description: OK
          content: {}
        400:
          description: Couldn't understand your request.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: DataSource
  /Reports({Id})/DependentItems:
    get:
      tags:
      - Reports
      summary: Returns a list of CatalogItems that reference the Report specified
        by the Id.
      operationId: GetReportDependentItems
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                title: ODataDependentItems
                type: object
                properties:
                  '@odata.context':
                    type: string
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/CatalogItem'
        400:
          description: Couldn't understand your request.
          content: {}
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /Reports({Id})/HistorySnapshots:
    get:
      tags:
      - Reports
      summary: Get a list of HistorySnapshots for the specified Report.
      operationId: GetReportHistorySnapshots
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HistorySnapshot'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    post:
      tags:
      - Reports
      summary: Creates new HistorySnapshot
      operationId: AddReportHistorySnapshot
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: boolean
                format: true|false
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /Reports({Id})/HistorySnapshots({HistoryId}):
    get:
      tags:
      - Reports
      summary: Gets the requested Reports HistorySnapshot specified by HistoryId.
      operationId: GetReportHistorySnapshot
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      - name: HistoryId
        in: path
        description: The ID property of the HistorySnapshot
        required: true
        schema:
          type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HistorySnapshot'
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    delete:
      tags:
      - Reports
      summary: Deletes the requested Reports HistorySnapshot specified by HistoryId.
      operationId: DeleteReportHistorySnapshot
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      - name: HistoryId
        in: path
        description: The ID property of the HistorySnapshot
        required: true
        schema:
          type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: boolean
                format: true|false
        400:
          description: Couldn't understand your request.
          content: {}
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /Reports({Id})/HistorySnapshotOptions:
    get:
      tags:
      - Reports
      summary: Gets the HistorySnapshotOptions for the specified Report.
      operationId: GetReportHistorySnapshotOptions
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HistorySnapshotOptions'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    put:
      tags:
      - Reports
      summary: Updates HistorySnapshotOptions for the specified Report.
      operationId: SetReportHistorySnapshotOptions
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: Modified HistorySnapshotOptions object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HistorySnapshotOptions'
        required: true
      responses:
        200:
          description: Ok
          content: {}
        400:
          description: Couldn't understand your request.
          content: {}
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: HistorySnapshotOptions
  /Reports({Id})/Model.CheckDataSourceConnection:
    post:
      tags:
      - Reports
      summary: Checks the status of the specified Reports DataSource connection.
      operationId: CheckReportDataSourceConnection
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: The name of the DataSource to check.
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSourceCheckResult'
        400:
          description: Couldn't understand your request.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: DataSourceName
  /Reports({Id})/Model.Upload:
    post:
      tags:
      - Reports
      summary: Does an efficient binary upload of a new or existing Report CatalogItem
        from a multipart/form-data request. Use of this API is recommended for files
        larger than 25 MB in size.
      operationId: UploadReport
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - File
              properties:
                File:
                  type: string
                  description: The file contents.
                  format: binary
        required: true
      responses:
        201:
          description: The definition of the Report that was just created without
            the content.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        400:
          description: Couldn't understand your request.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /Reports({Id})/Model.UpdateCacheSnapshot:
    post:
      tags:
      - Reports
      summary: Updates the execution cache snapshot for the specified report.
      operationId: UpdateCacheSnapshot
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                title: UpdateCacheSnapshotResult
                type: object
                properties:
                  value:
                    type: boolean
        400:
          description: Couldn't understand your request.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /Reports({Id})/Model.UpdateReportDataSets:
    post:
      tags:
      - Reports
      summary: Updates report to use the specificed shared datasets.
      operationId: UpdateReportDataSets
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: Shared datasets to be used by specified report
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SharedDataSets'
        required: true
      responses:
        204:
          description: No Content
          content: {}
        400:
          description: Couldn't understand your request.
          content: {}
        404:
          description: Not found
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: DataSets
  /Reports({Id})/ParameterDefinitions:
    get:
      tags:
      - Reports
      summary: Gets the ParameterDefinitions associated with the Report specified
        by the Id.
      operationId: GetReportParameterDefinitions
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                title: ODataProperties
                type: object
                properties:
                  '@odata.context':
                    type: string
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/ReportParameterDefinition'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    patch:
      tags:
      - Reports
      summary: Updates the ParameterDefinitions associated with the Report specified
        by Id.
      operationId: UpdateReportParameterDefinitions
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: Updated definitions for the ParameterDefinitions associated with
          the Report, represented as ParameterDefinitionsPatch object. It is only
          necessary to include properties to be updated. All other property values
          will be left unchanged.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ReportParameterDefinitionPatch'
        required: true
      responses:
        204:
          description: No Content
          content: {}
        400:
          description: Couldn't understand your request.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: ParameterDefinitions
  /Reports({Id})/Policies:
    get:
      tags:
      - Reports
      summary: Gets policies associated with the specified Report CatalogItem.
      operationId: GetReportPolicies
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemPolicy'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    put:
      tags:
      - Reports
      summary: Replaces ItemPolicies associated with the Report specified by the Id.
      operationId: SetReportPolicies
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: The ItemPolicy definitions that will be replaced.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ItemPolicy'
        required: true
      responses:
        200:
          description: Ok
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: ItemPolicies
  /Reports({Id})/Properties:
    get:
      tags:
      - Reports
      summary: Gets the specified Reports Properties (takes list of Property names
        to retrieve the values)
      operationId: GetReportProperties
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      - name: properties
        in: query
        description: Names for the Properties to be returned.
        style: form
        explode: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                title: ODataProperties
                type: object
                properties:
                  '@odata.context':
                    type: string
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/Property'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    put:
      tags:
      - Reports
      summary: Updates the Report Properties included in the given list.
      operationId: UpdateReportProperties
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: The Properties that will be updated.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Property'
        required: true
      responses:
        200:
          description: Ok
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: Properties
  /Reports({Id})/SharedDataSets:
    get:
      tags:
      - Reports
      summary: Gets the shared DataSets for the specified Report.
      operationId: GetReportSharedDataSets
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataSet'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    put:
      tags:
      - Reports
      summary: Updates the DataSet definitions associated with the specified Report.
      operationId: SetReportSharedDataSets
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: Updated DataSet definitions for the specified Report.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DataSet'
        required: true
      responses:
        200:
          description: OK
          content: {}
        400:
          description: Couldn't understand your request.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: DataSets
  /Reports({Id})/Subscriptions:
    get:
      tags:
      - Reports
      summary: Gets the Subscriptions for the specified Report.
      operationId: GetReportSubscriptions
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      - name: $top
        in: query
        description: Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
        schema:
          type: integer
      - name: $skip
        in: query
        description: Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
        schema:
          type: integer
      - name: $filter
        in: query
        description: Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
        schema:
          type: string
      - name: $count
        in: query
        description: Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
        schema:
          type: string
      - name: $orderBy
        in: query
        description: Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
        schema:
          type: string
      - name: $expand
        in: query
        description: Expand related entities, see [OData Expand](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374621)
        schema:
          type: string
      - name: $select
        in: query
        description: Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
        schema:
          type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subscription'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /Resources:
    get:
      tags:
      - Resources
      summary: Gets an array of Resource catalog items
      operationId: GetResources
      parameters:
      - name: $top
        in: query
        description: Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
        schema:
          type: integer
      - name: $skip
        in: query
        description: Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
        schema:
          type: integer
      - name: $filter
        in: query
        description: Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
        schema:
          type: string
      - name: $count
        in: query
        description: Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
        schema:
          type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                title: ODataResources
                type: object
                properties:
                  '@odata.context':
                    type: string
                  '@odata.count':
                    type: integer
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/Resource'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    post:
      tags:
      - Resources
      summary: Creates new Resource item
      operationId: AddResource
      requestBody:
        description: The definition of the new Resource item.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resource'
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        400:
          description: Couldn't understand your request.
          content: {}
        409:
          description: Conflict. Item already exists.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: Resource
  /Resources({Id}):
    get:
      tags:
      - Resources
      summary: Get the specified Resource.
      operationId: GetResource
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    delete:
      tags:
      - Resources
      summary: Delete the specified Resource catalog item.
      operationId: DeleteResource
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    patch:
      tags:
      - Resources
      summary: Updates the specified Resource catalog item.
      operationId: UpdateResource
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: Definition of the Resource item that replaces the current item
          on the server. It is only necessary to include properties to be updated.
          All other property values on the CatalogItem will be left unchanged.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resource'
        required: true
      responses:
        204:
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: Resource
  /Resources({Id})/AllowedActions:
    get:
      tags:
      - Resources
      summary: Gets a list of actions allowed in the current session; considering
        user permissions and product edition capabilities.
      operationId: GetResourceAllowedActions
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                title: ODataAllowedActions
                type: object
                properties:
                  '@odata.context':
                    type: string
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/AllowedAction'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /Resources({Id})/Content/$value:
    get:
      tags:
      - Resources
      summary: Gets the content of the specified Resource CatalogItem specified by
        the Id.
      operationId: GetResourceContent
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/odata.error'
  /Resources({Id})/Model.Upload:
    post:
      tags:
      - Resources
      summary: Does an efficient binary upload of a new or existing Resource CatalogItem
        from a multipart/form-data request. Use of this API is recommended for files
        larger than 25 MB in size.
      operationId: UploadResource
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - File
              properties:
                File:
                  type: string
                  description: The file contents.
                  format: binary
        required: true
      responses:
        201:
          description: The definition of the Resource that was just created without
            the content.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        400:
          description: Couldn't understand your request.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /Resources({Id})/Policies:
    get:
      tags:
      - Resources
      summary: Gets ItemPolicies on the Resource item.
      operationId: GetResourcePolicies
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemPolicy'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    put:
      tags:
      - Resources
      summary: Replaces ItemPolicies on the Resource item.
      operationId: SetResourcePolicies
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: Array of ItemPolicies to set on the Resource CatalogItem.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ItemPolicy'
        required: true
      responses:
        200:
          description: Ok
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: Policies
  /Resources({Id})/Properties:
    get:
      tags:
      - Resources
      summary: Gets the specified Resources Properties (takes list of Property names
        to retrieve the values)
      operationId: GetResourceProperties
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      - name: Properties
        in: query
        description: Names for the Properties to be returned.
        style: form
        explode: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                title: ODataProperties
                type: object
                properties:
                  '@odata.context':
                    type: string
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/Property'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    put:
      tags:
      - Resources
      summary: Updates the Resource Properties included in the given list.
      operationId: UpdateResourceProperties
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID or path) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
          path example: path='/folder1/folder2/item'
          If the path itself contains single quote, it should be escaped - add another single quote.
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: The Properties that will be updated.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Property'
        required: true
      responses:
        200:
          description: Ok
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: Properties
  /Session:
    post:
      tags:
      - Session
      summary: Creates a new session
      operationId: CreateSession
      requestBody:
        description: The credentials of the user to logon as
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentials'
        required: true
      responses:
        201:
          description: A session for the user credentials was created and a forms
            authentication cookie was sent as part of the response.
          content: {}
        400:
          description: Couldn't understand your request.
          content: {}
        401:
          description: The credentials provided are invalid.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: UserCredentials
    delete:
      tags:
      - Session
      summary: Deletes the currently active session
      operationId: DeleteSession
      responses:
        200:
          description: An empty session cookie is sent with the response.
          content: {}
        401:
          description: The user is not yet authenticated.
          content: {}
  /Subscriptions:
    get:
      tags:
      - Subscriptions
      summary: Gets an array of Subscriptions.
      operationId: GetSubscriptions
      parameters:
      - name: $top
        in: query
        description: Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
        schema:
          type: integer
      - name: $skip
        in: query
        description: Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
        schema:
          type: integer
      - name: $filter
        in: query
        description: Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
        schema:
          type: string
      - name: $count
        in: query
        description: Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
        schema:
          type: string
      - name: $orderBy
        in: query
        description: Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
        schema:
          type: string
      - name: $expand
        in: query
        description: Expand related entities, see [OData Expand](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374621)
        schema:
          type: string
      - name: $select
        in: query
        description: Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
        schema:
          type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subscription'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    post:
      tags:
      - Subscriptions
      summary: Creates new Subscription item
      operationId: AddSubscription
      requestBody:
        description: The definition of the new Subscription item. Id field given in
          the Example is not required.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscription'
        required: true
      responses:
        201:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        400:
          description: Couldn't understand your request.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: Subscription
  /Subscriptions({Id}):
    get:
      tags:
      - Subscriptions
      summary: Get the specified Subscription.
      operationId: GetSubscription
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
        required: true
        schema:
          type: string
          format: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        400:
          description: Couldn't understand your request.
          content: {}
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    put:
      tags:
      - Subscriptions
      summary: Replaces the Subscription item using Id property as key.
      operationId: SetSubscription
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: Subscription item to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscription'
        required: true
      responses:
        204:
          description: No Content
          content: {}
        400:
          description: Couldn't understand your request.
          content: {}
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: Subscription
    delete:
      tags:
      - Subscriptions
      summary: Deletes the specified Subscription.
      operationId: DeleteSubscription
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
        required: true
        schema:
          type: string
          format: string
      responses:
        204:
          description: No Content
          content: {}
        400:
          description: Couldn't understand your request.
          content: {}
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    patch:
      tags:
      - Subscriptions
      summary: Updates the Subscription item using Id property as key.
      operationId: UpdateSubscription
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
        required: true
        schema:
          type: string
          format: string
      requestBody:
        description: Definition of the Subscription that updates the current item
          on the server. It is only necessary to include properties to be updated.
          All other property values will be left unchanged.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscription'
        required: true
      responses:
        204:
          description: No Content
          content: {}
        400:
          description: Couldn't understand your request.
          content: {}
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: Subscription
  /Subscriptions({Id})/Model.Enable:
    post:
      tags:
      - Subscriptions
      summary: Enables a Subscription specified by the Id.
      operationId: EnableSubscription
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
        required: true
        schema:
          type: string
          format: string
      responses:
        204:
          description: No Content
          content: {}
        400:
          description: Couldn't understand your request.
          content: {}
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /Subscriptions({Id})/Model.Execute:
    post:
      tags:
      - Subscriptions
      summary: Executes the Subscription specified by the Id.
      operationId: ExecuteSubscription
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
        required: true
        schema:
          type: string
          format: string
      responses:
        204:
          description: No Content
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /Subscriptions({Id})/Model.Disable:
    post:
      tags:
      - Subscriptions
      summary: Disables the Subscription specified by the Id.
      operationId: DisableSubscription
      parameters:
      - name: Id
        in: path
        description: |-
          The key (GUID) that uniquely identifies the object.
          GUID example: 01234567-89ab-cdef-0123-456789abcdef
        required: true
        schema:
          type: string
          format: string
      responses:
        204:
          description: No Content
          content: {}
        400:
          description: Couldn't understand your request.
          content: {}
        404:
          description: Not found.
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /System:
    get:
      tags:
      - System
      summary: Get SystemInformation
      operationId: GetSystemInfo
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemInfo'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /System/AllowedActions:
    get:
      tags:
      - System
      summary: Gets a list of system level actions allowed in the current session;
        user permissions and product edition capabilities are considered when querying.
      operationId: GetSystemAllowedActions
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                title: ODataAllowedActions
                type: object
                properties:
                  '@odata.context':
                    type: string
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/AllowedAction'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
  /System/Policies:
    get:
      tags:
      - System
      summary: Gets the System Policies.
      operationId: GetSystemPolicies
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Policy'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    put:
      tags:
      - System
      summary: Updates the System's Policies.
      operationId: SetSystemPolicies
      requestBody:
        description: The SystemPolicy object that contains settings to apply.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemPolicy'
        required: true
      responses:
        200:
          description: Ok
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: SystemPolicy
  /System/Properties:
    get:
      tags:
      - System
      summary: Gets the Systems Properties (takes list of Property names to retrieve
        the values)
      operationId: GetSystemProperties
      parameters:
      - name: properties
        in: query
        description: Names for the Properties to be returned.
        style: form
        explode: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                title: ODataProperties
                type: object
                properties:
                  '@odata.context':
                    type: string
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/Property'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
    patch:
      tags:
      - System
      summary: Updates the System Properties with the given property list.
      operationId: UpdateSystemProperties
      requestBody:
        description: Definition of the SystemProperties that updates the current item
          on the server. It is only necessary to include properties to be updated.
          All other property values will be left unchanged.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Property'
        required: true
      responses:
        200:
          description: Ok
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/odata.error'
      x-codegen-request-body-name: Properties
components:
  schemas:
    AllowedAction:
      title: AllowedAction
      type: object
      properties:
        Action:
          type: string
          description: The allowed action.
          format: string
      description: An object that specifies an allowed action on a CatalogItem.
    BulkOperationsResult:
      title: BulkOperationsResult
      type: object
      properties:
        FailedOperations:
          type: array
          items:
            type: string
        HasErrors:
          type: boolean
          format: true|false
      description: Result of bulk operations like MoveItems and DeleteItems
    CacheOptions:
      title: CacheOptions
      type: object
      properties:
        ExecutionType:
          $ref: '#/components/schemas/ItemExecutionType'
        Expiration:
          $ref: '#/components/schemas/ExpirationReference'
      description: An object that specifies options for a data cache.
    CacheRefreshPlan:
      title: CacheRefreshPlan
      type: object
      properties:
        Id:
          type: string
          description: A unique UUID value that specifies the identifier by which
            this CacheRefreshPlan can be referenced in the definition of other items.
          format: uuid
          example: 01234567-89ab-cdef-0123-456789abcdef
        Owner:
          type: string
          description: A string value that specifies the owner of the CacheRefreshPlan.
          format: string
        Description:
          type: string
          description: A string value that contains descriptive text about the CacheRefreshPlan.
          format: string
        CatalogItemPath:
          type: string
          description: A string value that contains the fully qualified URL path location
            of the CatalogItem that represents the CacheRefreshPlan.
          format: string
        EventType:
          type: string
          description: A string value that specifies which EventType to use for logging.
          format: string
        Schedule:
          $ref: '#/components/schemas/ScheduleReference'
        LastRunTime:
          type: string
          description: A date-time value that specifies the date-time of the last
            run of the CacheRefreshPlan.
          format: date-time
          example: 2017-04-13T15:51:04Z
        LastStatus:
          type: string
          description: A string value that contains the network username of the last
            user to modify the CacheRefreshPlan.
          format: string
        ModifiedBy:
          type: string
          description: A string value that contains the network user name of the last
            user to modify the CacheRefreshPlan
          format: string
        ModifiedDate:
          type: string
          description: A string value that contains the date-time of the last modification
            to the CacheRefreshPlan.
          format: date-time
          example: 2017-04-13T15:51:04Z
        ParameterValues:
          type: array
          description: An array of parameter values for the CacheRefreshPlan. All
            parameters without a default value MUST have a value specified.
          items:
            $ref: '#/components/schemas/ParameterValue'
      description: An object that specifies a plan for data cache refresh. The plan
        can be stored and re-used by multiple CatalogItems.
    CatalogItem:
      title: CatalogItem
      type: object
      properties:
        Id:
          type: string
          description: A unique UUID value that specifies the identifier by which
            this CatalogItem can be referenced in requests or by other defined objects.
          format: uuid
          example: 01234567-89ab-cdef-0123-456789abcdef
        Name:
          type: string
          description: A string value that specifies the name for the CatalogItem.
            This name is typically displayed in the user interface.
          format: string
        Description:
          type: string
          description: A string value that contains descriptive text about the CatalogItem.
          format: string
        Path:
          type: string
          description: A string value that contains the full server path for the CatalogItem.
            Path is defined as an alternate key on the CatalogItem and can be used
            as the parameter by which CatalogItem can be referenced in requests or
            by other defined objects.
          format: string
        Type:
          $ref: '#/components/schemas/CatalogItemType'
        Hidden:
          type: boolean
          description: A boolean value that indicates if the CatalogItem is hidden.
            If true, the item will generally not appear in listings of CatalogItems
            within the parent item.
          format: true|false
        Size:
          type: integer
          description: An Int64 value that contains the size of the CatalogItem in
            bytes.
          format: int64
        ModifiedBy:
          type: string
          description: A string value that contains the network user name of the last
            user to modify the CatalogItem.
          format: string
        ModifiedDate:
          type: string
          description: A string value that contains the date-time of the last modification
            to the CatalogItem.
          format: date-time
          example: 2017-04-13T15:51:04Z
        CreatedBy:
          type: string
          description: A string value that represents the network user name of the
            user who originally created the CatalogItem.
          format: string
        CreatedDate:
          type: string
          description: A string that contains the date-time of the creation of the
            CatalogItem.
          format: date-time
          example: 2017-04-13T15:51:04Z
        ParentFolderId:
          type: string
          description: A unique UUID value that specifies the identifier of the Folder
            CatalogItem that contains this CatalogItem.
          format: uuid
          example: 01234567-89ab-cdef-0123-456789abcdef
        ContentType:
          type: string
          description: A string value that contains a SOAP MIME-type that is associated
            with the CatalogItem.
          format: string
        Content:
          type: string
          description: A string value that contains binary encoding by base64url encoding
            rules. The value of this property is not processed by the server. In object
            creation the server receives and stores a value, and in object retrieval
            the server returns the previously stored value.
        IsFavorite:
          type: boolean
          description: A boolean value that specifies whether the CatalogItem is designated
            as a Favorite.
          format: true|false
      description: CatalogItem is an abstract type that contains the common properties
        of all the types of CatalogItems. Hence, it is the base type from which the
        other CatalogItem types are derived.
    CatalogItemType:
      title: CatalogItemType
      type: string
      description: An enumeration of values that specifies the type of the CatalogItem.
      enum:
      - Unknown
      - Folder
      - Report
      - DataSource
      - DataSet
      - Component
      - Resource
      - Kpi
      - MobileReport
      - LinkedReport
      - ReportModel
      - PowerBIReport
      - ExcelWorkbook
    CredentialsStoredInServer:
      title: CredentialsStoredInServer
      type: object
      properties:
        UserName:
          type: string
          description: A string value that contains the user name to be used to connect
            to an external data source.
          format: string
        Password:
          type: string
          description: A string value that contains the password to be used to connect
            to an external data source.
          format: string
        UseAsWindowsCredentials:
          type: boolean
          description: A boolean value that indicates whether the supplied credentials
            should be used as Windows credentials.
          format: true|false
        ImpersonateAuthenticatedUser:
          type: boolean
          description: A boolean value that indicates whether the session should impersonate
            the user for the supplied credentials.
          format: true|false
      description: 'This object holds credentials for connections to an external data
        source. The object is stored on the Report Server for later retrieval and
        use. Applies to DataSets, LinkedReports, and Reports. Ignored when used with
        PowerBIReports. For PowerBIReports, use DataSourceSubType = DataModel and
        DataModelDataSource.UserName and DataModelDataSource.Secret NOTE: This object
        represents a security risk as its properties can be seen in plain text over
        the HTTP protocol; HTTPS is recommended.'
    CredentialsSuppliedByUser:
      title: CredentialsSuppliedByUser
      type: object
      properties:
        DisplayText:
          type: string
          description: A string value that contains text used to prompt a user to
            supply credentials for connections to an external data source.
          format: string
        UseAsWindowsCredentials:
          type: boolean
          description: A boolean value that indicates whether credentials the user
            supplies in a prompt should be used as Windows credentials.
          format: true|false
      description: An object that contains information about prompting a user for
        credentials for connections to an external data source. Applies to DataSets,
        LinkedReports, and Reports. Ignored when used with PowerBIReports.
    Comment:
      title: Comment
      type: object
      properties:
        Id:
          type: string
          description: A unique UUID value that specifies the identifier of the comment.
          format: uuid
        ItemId:
          type: string
          description: A unique UUID value that specifies the identifier of the CatalogItem
            item to which the comment is attached.
          format: uuid
          example: 01234567-89ab-cdef-0123-456789abcdef
        UserName:
          type: string
          description: ' A string value that represents the user who created the comment
            item.'
          format: string
        ThreadId:
          type: string
          description: A unique UUID value that specifies the identifier of the thread
            of the comment. A comment thread can be used to group comments that are
            a response to one another in one grouping.
          format: uuid
          example: 01234567-89ab-cdef-0123-456789abcdef
        AttachmentPath:
          type: string
          description: A string value that specifies the server path to an attachment
            that is part of the comment.
          format: string
        Text:
          type: string
          description: A string value that contains the text of the comment.
          format: string
        CreatedDate:
          type: string
          description: A string that contains the date-time of the creation of the
            comment.
          format: date-time
          example: 2017-04-13T15:51:04Z
        ModifiedDate:
          type: string
          description: A string value that contains the date-time of the last modification
            to the comment.
          format: date-time
          example: 2017-04-13T15:51:04Z
      description: An object that specifies a comment that is attached to a CatalogItem.
    DailyRecurrence:
      title: DailyRecurrence
      type: object
      properties:
        DaysInterval:
          type: integer
          description: An Int32 value representing interval in days.
          format: int32
      description: Represents the intervals at which a scheduled report runs. Intervals
        are specified in days.
    DataSet:
      allOf:
      - $ref: '#/components/schemas/CatalogItem'
      - title: DataSet
        type: object
        properties:
          HasParameters:
            type: boolean
            description: A boolean value that indicates whether the dataset definition
              contains parameters.
            format: true|false
          QueryExecutionTimeOut:
            type: integer
            description: An Int32 value that indicates the query execution timeout
              in seconds.
            format: int32
        description: The DataSet object is derived from the abstract type CatalogItem
          and therefore contains all of its properties. This object specifies the
          information needed to supply a set of data to a report. It is analogous
          to a view in a database and can include a data source pointer, a query definition,
          and optional parameter values, calculated fields, and filtering and collation
          information.
    DataSetRow:
      title: DataSetRow
      type: object
      properties:
        Id:
          type: string
          description: A unique UUID value that specifies the identifier by which
            this item can be referenced.
          format: uuid
          example: 01234567-89ab-cdef-0123-456789abcdef
      description: An object that represents a row of data in a DataSet.
    DataSetField:
      title: DataSetField
      type: object
      properties:
        Name:
          type: string
        DataType:
          $ref: '#/components/schemas/ReportParameterType'
      description: An object that represents a field in a DataSet.
    DataSetItem:
      title: DataSetItem
      type: object
      properties:
        TimeUnit:
          type: string
          description: 'The time unit for the DataSetItem. The possible values for
            this string are the following: ''Year'', ''Quarter'', ''Month'', ''Weekday'',
            ''Hour''.'
          format: string
        DateTimeColumn:
          type: string
          description: A string value that specifies the name of the column in the
            DataSetItem that represents date and time.
          format: string
      description: An object that contains additional dataset properties for the MobileReportManifest
    DataSetParameter:
      title: DataSetParameter
      type: object
      properties:
        Name:
          type: string
          description: The name of the parameter.
          format: string
        Value:
          type: string
          description: The value to set for the parameter.
          format: string
      description: An object that contains the name and value for a parameter to be
        used when executing a DataSet.
    DataSetParameterInfo:
      title: DataSetParameterInfo
      type: object
      properties:
        Name:
          type: string
          description: The name of the parameter.
          format: string
        DefaultValue:
          type: string
          description: The default value for the parameter.
          format: string
        Nullable:
          type: boolean
          description: Specifies whether the parameter can be null.
          format: true|false
        DataType:
          $ref: '#/components/schemas/ReportParameterType'
        IsExpression:
          type: boolean
          description: Specifies whether the parameter is an expression.
          format: true|false
        IsMultiValued:
          type: boolean
          description: Specifies whether the parameter contains multiple values.
          format: true|false
      description: An object that contains information about a parameter in a DataSet.
    DataSetSchema:
      title: DataSetSchema
      type: object
      properties:
        Name:
          type: string
          description: The name of the DataSet.
          format: string
        Fields:
          type: array
          description: The fields of the DataSet.
          items:
            $ref: '#/components/schemas/DataSetField'
        Parameters:
          type: array
          description: The parameters for the DataSet.
          items:
            $ref: '#/components/schemas/DataSetParameterInfo'
      description: An object that reprents the schema for a DataSet
    DataModelDataSource:
      type: object
      properties:
        AuthType:
          $ref: '#/components/schemas/DataModelDataSourceAuthType'
        SupportedAuthTypes:
          type: array
          items:
            $ref: '#/components/schemas/DataModelDataSourceAuthType'
        Kind:
          $ref: '#/components/schemas/DataModelDataSourceKind'
        ModelConnectionName:
          type: string
          description: The name of the model connection.
          format: string
        Secret:
          type: string
          description: The value of the credential secret.
          format: string
        Type:
          $ref: '#/components/schemas/DataModelDataSourceType'
        Username:
          type: string
          description: The name of the parameter.
          format: string
      description: Applies to PowerBIReports. Ignored when used with DataSets, LinkedReports,
        and Reports.
    DataModelDataSourceAuthType:
      type: string
      enum:
      - Unknown
      - Anonymous
      - Integrated
      - Windows
      - UsernamePassword
      - Key
      - Impersonate
    DataModelDataSourceKind:
      title: DataModelDataSourceType
      type: string
      description: An enumeration of data model data source types.
      enum:
      - UnknownFunction
      - AnalysisServices
      - SQL
      - File
      - AzureBlobs
      - Oracle
      - Folder
      - MySql
      - Teradata
      - Web
      - OData
      - HDInsight
      - AzureTables
      - SharePoint
      - DataMarket
      - PostgreSQL
      - Sybase
      - DB2
      - Informix
      - MQ
      - ActiveDirectory
      - CurrentWorkbook
      - Exchange
      - Facebook
      - Hdfs
      - SapBusinessObjects
      - Salesforce
      - Odbc
      - GoogleAnalytics
      - SapBusinessWarehouse
    DataModelDataSourceType:
      title: DataModelDataSourceType
      type: string
      description: An enumeration of data model data source types.
      enum:
      - Unknown
      - Live
      - DirectQuery
      - Import
    DataModelRole:
      type: object
      properties:
        ModelRoleId:
          type: string
          description: A unique UUID value that specifies the identifier of the data
            model role.
          format: uuid
        ModelRoleName:
          type: string
          description: A string value that specifies the name for the data model role.
            This name will typically be displayed in the user interface.
          format: string
      description: Applies to PowerBIReports. A data model role used to control access
        to row-level data.
    DataModelParameter:
      type: object
      properties:
        Name:
          type: string
          description: The name of the parameter as defined in the report.
          format: string
        Value:
          type: string
          description: The value defined for the parameter.
          format: string
      description: Applies to PowerBIReports. A data model parameter defined in the
        report.
    DataModelRoleAssignment:
      type: object
      properties:
        GroupUserName:
          type: string
          description: A string value that specifies the name of the user or group
            to which the role assignment applies.
          format: string
        DataModelRoles:
          type: array
          description: An array of unique UUID values that specify the identifiers
            of assigned data model roles.
          items:
            type: string
            format: uuid
      description: Applies to PowerBIReports. Assignment of data model roles to a
        user or group.
    DataSource:
      allOf:
      - $ref: '#/components/schemas/CatalogItem'
      - title: DataSource
        type: object
        properties:
          IsEnabled:
            type: boolean
            description: A Boolean value that specifies whether the DataSource is
              enabled for use.
            format: true|false
          ConnectionString:
            type: string
            description: A string value that can be passed to a data source in order
              to begin the process of establishing connection.
            format: string
          DataModelDataSource:
            $ref: '#/components/schemas/DataModelDataSource'
          DataSourceSubType:
            type: string
            description: Subtype of the datasource type. Applies to PowerBIReports.
              Ignored when used with DataSets, LinkedReports, and Reports.
            format: string
          DataSourceType:
            type: string
            description: DataSource extension such as 'SQL'. Applies to DataSets,
              LinkedReports, and Reports. Ignored when used with PowerBIReports. For
              PowerBIReports, use DataSourceSubType = DataModel and DataModelDataSource.Type.
            format: string
          IsOriginalConnectionStringExpressionBased:
            type: boolean
            description: Indicates whether the original connection string for the
              datasource was expression-based. Applies to DataSets, LinkedReports,
              and Reports. Ignored when used with PowerBIReports.
            format: true|false
          IsConnectionStringOverridden:
            type: boolean
            description: Specifies whether the original connection string is overridden.
              Applies to DataSets, LinkedReports, and Reports. Ignored when used with
              PowerBIReports.
            format: true|false
          CredentialsByUser:
            $ref: '#/components/schemas/CredentialsSuppliedByUser'
          CredentialsInServer:
            $ref: '#/components/schemas/CredentialsStoredInServer'
          IsReference:
            type: boolean
            description: Indicates whether this is a reference to a shared data source
              or an embedded data source. Applies to DataSets, LinkedReports, and
              Reports. Ignored when used with PowerBIReports.
            format: true|false
          Subscriptions:
            $ref: '#/components/schemas/Subscription'
        description: An object that defines information about an external source of
          data that can be connected to as a source of data for Reporting Services.
          DataSource is derived from CatalogItem and therefore includes all properties
          defined by CatalogItem.
    DataSourceCheckResult:
      title: DataSourceCheckResult
      type: object
      properties:
        IsSuccessful:
          type: boolean
          format: true|false
        ErrorMessage:
          type: string
      description: Represents the result of testing a DataSource connection
    DaysOfWeekSelector:
      title: DaysOfWeekSelector
      type: object
      properties:
        Sunday:
          type: boolean
          format: true|false
        Monday:
          type: boolean
          format: true|false
        Tuesday:
          type: boolean
          format: true|false
        Wednesday:
          type: boolean
          format: true|false
        Thursday:
          type: boolean
          format: true|false
        Friday:
          type: boolean
          format: true|false
        Saturday:
          type: boolean
          format: true|false
      description: Represents the days of the week on which a scheduled report runs.
    DrillthroughTarget:
      title: DrillthroughTarget
      type: object
      properties:
        DrillthroughTargetType:
          $ref: '#/components/schemas/DrillthroughTargetType'
      description: An object that specifies the type of the target of a drillthrough
        operation.
    DrillthroughTargetType:
      title: DrillthroughTargetType
      type: string
      description: An enumeration of values that specify the available types for the
        target object of a drillthrough operation.
      enum:
      - Url
      - CatalogItem
    ExcelWorkbook:
      allOf:
      - $ref: '#/components/schemas/CatalogItem'
      - title: ExcelWorkbook
        type: object
        properties:
          Comments:
            type: array
            description: An array of objects of type Comment that are associated with
              the ExcelWorkbook CatalogItem.
            items:
              $ref: '#/components/schemas/Comment'
        description: An object that is the CatalogItem for an Excel workbook.  This
          object is derived from CatalogItem and therefore contains all of its properties,
          plus additional properties for an Excel workbook.
    ExpirationReference:
      title: ExpirationReference
      type: object
      properties:
        Minutes:
          type: integer
          description: Number of minutes until expiration.
          format: int32
        Schedule:
          $ref: '#/components/schemas/ScheduleReference'
      description: An object that contains a specification for cache expiration, expressed
        either in minutes or by a schedule.
    Extension:
      title: Extension
      type: object
      properties:
        ExtensionType:
          $ref: '#/components/schemas/ExtensionType'
        Name:
          type: string
          description: A string value that specifies the name for the Extension. This
            name will typically be displayed in the user interface.
          format: string
        LocalizedName:
          type: string
          description: A string value that specifies a localized name for the Extension.
          format: string
        Visible:
          type: boolean
          description: A Boolean value that indicates if the Extension is visible.
            If false, the item will generally not appear in listings of available
            extensions.
          format: true|false
      description: An object that holds the definition of a Reporting Services extension.
    ExtensionParameter:
      title: ExtensionParameter
      type: object
      properties:
        Name:
          type: string
          description: A string value that specifies the name for the ExtensionParameter.
          format: string
        DisplayName:
          type: string
          description: The name of the extension setting that is displayed to the
            user.
          format: string
        Required:
          type: boolean
          description: Indicates whether the value is required.
          format: true|false
        ReadOnly:
          type: boolean
          description: Indicates whether the setting is read-only.
          format: true|false
        Value:
          type: string
          description: A string that represents the value of an extension parameter.
          format: string
        Error:
          type: string
          description: An error that describes a problem with the value of the setting.
          format: string
        Encrypted:
          type: boolean
          description: Indicates whether the extension parameter value should be encrypted
            in the Report Server database.
          format: true|false
        IsPassword:
          type: boolean
          description: A Boolean value that indicates whether the ExtensionParameter
            is a password.
          format: true|false
        ValidValues:
          type: array
          description: A set of values that can be configured for the setting.
          items:
            $ref: '#/components/schemas/ValidValue'
        ValidValuesIsNull:
          type: boolean
          description: A Boolean value that indicates whether the ValidValues property
            is null.
          format: true|false
      description: An object that contains the definition of a Reporting Services
        extension's parameter.
    ExtensionSettings:
      title: ExtensionSettings
      type: object
      properties:
        Extension:
          type: string
          description: A string value that specifies the name of the Reporting Services
            extension that the settings in the object apply to.
          format: string
        ParameterValues:
          $ref: '#/components/schemas/ParameterValue'
      description: An object that defines parameter values that are used for a Reporting
        Services extension.
    ExtensionType:
      title: ExtensionType
      type: string
      description: An enumeration of Reporting Services extension types.
      enum:
      - Delivery
      - DeliveryUI
      - Render
      - Data
      - All
    FavoriteItem:
      title: FavoriteItem
      type: object
      properties:
        Id:
          type: string
          description: A unique UUID value that specifies the identifier of the CatalogItem
            that is marked as a favorite.
          format: uuid
          example: 01234567-89ab-cdef-0123-456789abcdef
        Item:
          $ref: '#/components/schemas/CatalogItem'
      description: An object that a reference to a CatalogItem that the user has marked
        as a favorite.
    Folder:
      allOf:
      - $ref: '#/components/schemas/CatalogItem'
      - title: Folder
        type: object
        description: The Folder object is derived from the abstract type, CatalogItem,
          and therefore contains all of its properties. This object specifies the
          definition of a Folder on the server. It does not contain additional properties
          beyond those specified for the base type, CatalogItem.
    HistorySnapshot:
      title: HistorySnapshot
      type: object
      properties:
        Id:
          type: string
          description: A unique UUID value that specifies the identifier of the CatalogItem
            for which this is a HistorySnapshot.
          format: uuid
          example: 01234567-89ab-cdef-0123-456789abcdef
        HistoryId:
          type: string
          description: A string that contains the date-time of the execution of the
            HistorySnapshot. This, together with the Id of the CatalogItem, identifies
            this HistorySnapshot
          format: string
        CreationDate:
          type: string
          description: A string that contains the date-time of the creation of the
            HistorySnapshot.
          format: date-time
          example: 2017-04-13T15:51:04Z
        Size:
          type: integer
          description: Size of the HistorySnapshot.
          format: int32
      description: An object that contains history snapshot information.
    HistorySnapshotOptions:
      title: HistorySnapshotOptions
      type: object
      properties:
        CatalogItemId:
          type: string
          description: The Id of the CatalogItem that this HistorySnapshotOptions
            belongs to.
          format: uuid
          example: 01234567-89ab-cdef-0123-456789abcdef
        HistorySnapshotsOptions:
          $ref: '#/components/schemas/ReportHistorySnapshotsOptions'
      description: An object that has a reference to a history snapshot option for
        a given catalog.
    ItemExecutionType:
      title: ItemExecutionType
      type: string
      description: An enumeration that specifies whether the item's execution is with
        live data, cached data, or based on a data snapshot.
      enum:
      - Live
      - Cache
      - Snapshot
    ItemPolicy:
      title: ItemPolicy
      type: object
      properties:
        InheritParentPolicy:
          type: boolean
          description: A Boolean value that indicates whether the access policy is
            to be inherited from the item's parent item.
          format: true|false
        Policies:
          type: array
          description: 'An array of objects of type Policy that specify the access
            policies to be applied to the item.      '
          items:
            $ref: '#/components/schemas/Policy'
      description: An object that specifies the access policy for the item.
    Kpi:
      allOf:
      - $ref: '#/components/schemas/CatalogItem'
      - title: Kpi
        type: object
        properties:
          ValueFormat:
            $ref: '#/components/schemas/KpiValueFormat'
          Visualization:
            $ref: '#/components/schemas/KpiVisualization'
          DrillthroughTarget:
            $ref: '#/components/schemas/DrillthroughTarget'
          Currency:
            type: string
            description: A string value that specifies the currency. Must follow the
              ISO 4217 Currency codes standard.
            format: string
          Values:
            $ref: '#/components/schemas/KpiValues'
          Data:
            $ref: '#/components/schemas/KpiData'
        description: An object that specifies a Key Process Indicator (KPI). KPI is
          derived from the abstract type CatalogItem and therefore includes all of
          its properties.
    KpiData:
      title: KpiData
      type: object
      properties:
        Value:
          $ref: '#/components/schemas/KpiDataItem'
        Goal:
          $ref: '#/components/schemas/KpiDataItem'
        Status:
          $ref: '#/components/schemas/KpiDataItem'
        TrendSet:
          $ref: '#/components/schemas/KpiDataItem'
      description: An object that specifies the metadata source for the component
        parts of a KPI.
    KpiDataItem:
      title: KpiDataItem
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/KpiDataItemType'
      description: An enumeration value that specifies the type of the KPI data item.
    KpiDataItemType:
      title: KpiDataItemType
      type: string
      description: An enumeration of values that specifies whether the KPI data item
        is static or shared.
      enum:
      - Static
      - Shared
    KpiSharedDataItemAggregation:
      title: KpiSharedDataItemAggregation
      type: string
      description: An enumeration of values that specify the available aggregations
        for KPIs.
      enum:
      - None
      - First
      - Last
      - Min
      - Max
      - Average
      - Sum
    KpiValueFormat:
      title: KpiValueFormat
      type: string
      description: An enumeration of values that specifies the available formats for
        KPI values.
      enum:
      - General
      - Abbreviated
      - DefaultCurrency
      - DefaultCurrencyWithDecimals
      - AbbreviatedDefaultCurrency
      - Percent
      - PercentWithDecimals
    KpiValues:
      title: KpiValues
      type: object
      properties:
        Value:
          type: string
          description: A string value that specifies the value of the Value Property
            for the KPI.
          format: string
        Goal:
          type: number
          description: A Double value that specifies the value of the Goal Property
            for the KPI.
          format: double
        Status:
          type: number
          description: A Double value that specifies the value of the Status Property
            for the KPI.
          format: double
        TrendSet:
          type: array
          description: An array of values that specifies the trendset for the KPI.
          items:
            type: integer
            format: double
      description: An object that specifies the current set of values for a KPI.
    KpiVisualization:
      title: KpiVisualization
      type: string
      description: An enumeration of values that specifies the available types of
        visualizations for a KPI.
      enum:
      - None
      - Bar
      - Line
      - Step
      - Area
    LinkedReport:
      allOf:
      - $ref: '#/components/schemas/CatalogItem'
      - title: LinkedReport
        type: object
        properties:
          HasParameters:
            type: boolean
            description: A boolean value that indicates whether the LinkedReport has
              parameters.
            format: true|false
          Link:
            type: string
            description: ' A string value that specifies the path to the report item
              that this linked report is linked to.'
            format: string
        description: An object that specifies a linked report. A linked report is
          a CatalogItem that contains a reference to the report definition but has
          its own set of report properties and settings.
    ManifestItem:
      type: object
      properties:
        Id:
          type: string
          description: A unique UUID value that specifies the identifier by which
            this defined item can be referenced in requests or in other defined objects.
          format: uuid
        Path:
          type: string
          description: A string value that contains the complete URL for the defined
            item.
        Name:
          type: string
          description: A string value that specifies the name for the item. This name
            will typically be displayed in the user interface.
        Hash:
          type: string
          description: A string value that contains an SHA256 hash of the contents
            of the item.
    MinuteRecurrence:
      title: MinuteRecurrence
      type: object
      properties:
        MinutesInterval:
          type: integer
          description: An Int32 value representing interval in minutes.
          format: int32
      description: Represents the intervals at which a scheduled report runs. Intervals
        are specified in minutes.
    MobileReport:
      allOf:
      - $ref: '#/components/schemas/CatalogItem'
      - title: MobileReport
        type: object
        properties:
          AllowCaching:
            type: boolean
            description: A boolean value that indicates whether the MobileReport allows
              caching.
            format: true|false
          Manifest:
            $ref: '#/components/schemas/MobileReportManifest'
          HasSharedDataSets:
            type: boolean
            description: A boolean value that indicates whether the MobileReport has
              shared DataSets associated with it.
            format: true|false
        description: An object that specifies the content of a MobileReport.
    MobileReportManifest:
      title: MobileReportManifest
      type: object
      properties:
        Resources:
          type: array
          description: An array of items of type ResourceGroup that specify the resources
            referenced in this MobileReport. A Resource is a generalized object and
            its content type is undefined.  A client must be able to understand the
            content returned in the Resource.
          items:
            $ref: '#/components/schemas/ResourceGroup'
        DataSets:
          type: array
          description: An array of objects of type DataSetItem that specifies the
            DataSets referenced in this MobileReport.
          items:
            $ref: '#/components/schemas/DataSetItem'
        Thumbnails:
          type: array
          description: An array of items of type ThumbnailItem that contains the Thumbnails
            associated with the MobileReport.
          items:
            $ref: '#/components/schemas/ThumbnailItem'
      description: An object that contains the specification of the contents of a
        mobile report.
    MobileReportResourceGroupType:
      title: MobileReportResourceGroupType
      type: string
      description: An enumeration of values that specifies the known types for MobileReport
        Resources.
      enum:
      - Unknown
      - Style
      - Map
    MobileReportThumbnailType:
      title: MobileReportThumbnailType
      type: string
      description: An enumeration of values that specifies the available orientations
        for Thumbnails.
      enum:
      - Unknown
      - Landscape
      - Portrait
    MonthlyDOWRecurrence:
      title: MonthlyDOWRecurrence
      type: object
      properties:
        WhichWeek:
          $ref: '#/components/schemas/WeekNumberEnum'
        WhichWeekSpecified:
          type: boolean
          description: Specifies whether week is specified
          format: true|false
        DaysOfWeek:
          $ref: '#/components/schemas/DaysOfWeekSelector'
        MonthsOfYear:
          $ref: '#/components/schemas/MonthsOfYearSelector'
      description: Represents the dates on which a scheduled report runs, typically
        by month, week, and day of the week.
    MonthlyRecurrence:
      title: MonthlyRecurrence
      type: object
      properties:
        Days:
          type: string
          description: Specifies days for recurrence.
        MonthsOfYear:
          $ref: '#/components/schemas/MonthsOfYearSelector'
      description: Represents the days of the month on which a scheduled report runs.
    MonthsOfYearSelector:
      title: MonthsOfYearSelector
      type: object
      properties:
        January:
          type: boolean
          format: true|false
        February:
          type: boolean
          format: true|false
        March:
          type: boolean
          format: true|false
        April:
          type: boolean
          format: true|false
        May:
          type: boolean
          format: true|false
        June:
          type: boolean
          format: true|false
        July:
          type: boolean
          format: true|false
        August:
          type: boolean
          format: true|false
        September:
          type: boolean
          format: true|false
        October:
          type: boolean
          format: true|false
        November:
          type: boolean
          format: true|false
        December:
          type: boolean
          format: true|false
      description: Represents the months of the year in which a scheduled report runs
    ParameterValue:
      title: ParameterValue
      type: object
      properties:
        Name:
          type: string
          description: A string that contains the name of the parameter.
          format: string
        Value:
          type: string
          description: A string that contains the value for the parameter.
          format: string
        IsValueFieldReference:
          type: boolean
          description: A boolean value that indicates if the parameter's value references
            a field.
          format: true|false
      description: An object that specifies a parameter's value as a name-value pair.
    Policy:
      title: Policy
      type: object
      properties:
        GroupUserName:
          type: string
          description: A string value that specifies the name of the user or group
            to which the policy applies.
          format: string
        Roles:
          type: array
          description: An array of objects of type Role that specify the security
            roles that are included in the Policy.
          items:
            $ref: '#/components/schemas/Role'
      description: An object that specifies a set of roles that are grouped together
        as a policy and can then be assigned as a group of policies to an item using
        the property GroupUserName.
    PowerBIReport:
      allOf:
      - $ref: '#/components/schemas/CatalogItem'
      - title: PowerBIReport
        type: object
        properties:
          HasDataSources:
            type: boolean
            description: A boolean value that indicates whether the PowerBIReport
              has DataSources.
            format: true|false
        description: An object that is the CatalogItem for a Power BI Report. This
          object is derived from CatalogItem and therefore contains all of its properties,
          plus additional properties for the PowerBIReport item.
    Property:
      title: Property
      type: object
      properties:
        Name:
          type: string
          description: A string value that specifies the name of the property.
          format: string
        Value:
          type: string
          description: A string value that specifies the value for the property.
          format: string
      description: An object that defines a property's value as a name-value pair.
    Report:
      allOf:
      - $ref: '#/components/schemas/CatalogItem'
      - title: Report
        type: object
        properties:
          HasDataSources:
            type: boolean
            description: A boolean value that indicates whether the Report has DataSources
              associated with it.
            format: true|false
          HasSharedDataSets:
            type: boolean
            description: A boolean value that indicates whether the Report has shared
              DataSets associated with it.
            format: true|false
          HasParameters:
            type: boolean
            description: A boolean value that indicates whether the Report has parameters.
            format: true|false
        description: An object that is the CatalogItem for a Report. This object is
          derived from CatalogItem and therefore contains all of its properties, plus
          additional properties for the Report item.
    ReportHistorySnapshotsOptions:
      title: ReportHistorySnapshotsOptions
      type: object
      properties:
        ManualCreationEnabled:
          type: boolean
          description: A boolean value that specifies whether manual snapshot creation
            is enabled for this HistorySnapshot.
          format: true|false
        KeepExecutionSnapshots:
          type: boolean
          description: A Boolean value that specifies whether execution snapshots
            are kept.
          format: true|false
        UseDefaultSystemLimit:
          type: boolean
          description: A boolean value that specifies whether the default system limit
            is used for this HistorySnapshot.
          format: true|false
        ScopedLimit:
          type: integer
          description: An Int32 value indicating how many snapshots to keep.
          format: int32
        SystemLimit:
          type: integer
          description: An Int32 value indicating how many snapshots can be kept systemwide.  Default
            (-1) is unlimited.
          format: int32
        Schedule:
          type: object
          allOf:
          - $ref: '#/components/schemas/ScheduleReference'
          - type: object
            description: An object that specifies the schedule for making snapshots
              for this item.
      description: An object that specifies options for a Report HistorySnapshot.
    ReportParameterDefinition:
      title: ReportParameterDefinition
      type: object
      properties:
        AllowBlank:
          type: boolean
          description: A boolean value that indicates whether the ReportParamter is
            allowed to be blank.
          format: true|false
        DefaultValues:
          type: array
          description: An array of string values that specify the ReportParameter's
            default values. If the parameter is multi-valued then the array can have
            more than one entry.
          items:
            type: string
        DefaultValuesIsNull:
          type: boolean
          description: ' A boolean value that indicates whether the DefaultValues
            property is NULL.'
          format: true|false
        DefaultValuesQueryBased:
          type: boolean
          description: A boolean value that indicates whether the ReportParamter's
            default values are obtained from a query (instead of being static specified
            values).
          format: true|false
        Dependencies:
          type: array
          description: An array of string values that specify the dependencies for
            the ReportParameter.
          items:
            type: string
        ErrorMessage:
          type: string
          description: Error returned when validating parameters.
          format: string
        MultiValue:
          type: boolean
          description: A boolean value that indicates whether the ReportParameter
            is multivalued.
          format: true|false
        Name:
          type: string
          description: A string value that specifies the name for the ReportParameter.
            This name will typically be displayed in the user interface.
          format: string
        Nullable:
          type: boolean
          description: A boolean value that indicates whether the ReportParameter
            is allowed to be null.
          format: true|false
        ParameterState:
          $ref: '#/components/schemas/ReportParameterState'
        ParameterType:
          $ref: '#/components/schemas/ReportParameterType'
        ParameterVisibility:
          $ref: '#/components/schemas/ReportParameterVisibility'
        Prompt:
          type: string
          description: A string value that specifies text used to prompt a user for
            the value of the ReportParameter.
          format: string
        PromptUser:
          type: boolean
          description: A boolean value that indicates whether the user should be prompted
            for the value for the ReportParameter.
          format: true|false
        QueryParameter:
          type: boolean
          description: A boolean value that indicates whether the ReportParamter is
            query based.
          format: true|false
        ValidValues:
          type: array
          items:
            $ref: '#/components/schemas/ValidValue'
        ValidValuesIsNull:
          type: boolean
          description: A boolean value that indicates whether the ValidValues property
            is NULL.
          format: true|false
        ValidValuesQueryBased:
          type: boolean
          description: A boolean value that indicates whether the ReportParameter's
            valid values are obtained from a query (instead of being static specified
            values).
          format: true|false
      description: An object that specifies the metadata definition of a parameter
        for a report.
    ReportParameterDefinitionPatch:
      title: ReportParameterDefinitionPatch
      type: object
      properties:
        Name:
          type: string
          description: A string value that specifies the name of the ReportParameter.
          format: string
        DefaultValues:
          type: array
          description: Array of default values
          items:
            type: string
        Prompt:
          type: string
          description: A string value that specifies text used to prompt a user for
            the value of the ReportParameter.
          format: string
        ParameterVisibility:
          $ref: '#/components/schemas/ReportParameterVisibility'
      description: An object that specifies the parts of a report parameter that can
        be modified outside of the RDL definition.
    ReportParameterState:
      title: ReportParameterState
      type: string
      description: An enumeration of values that specify the valid states for a ReportParameter.
      enum:
      - HasValidValue
      - MissingValidValue
      - HasOutstandingDependencies
      - DynamicValuesUnavailable
    ReportParameterType:
      title: ReportParameterType
      type: string
      description: An enumeration of values that specify the data types for a report
        parameter.
      enum:
      - Boolean
      - DateTime
      - Integer
      - Float
      - String
    ReportParameterVisibility:
      title: ReportParameterVisibility
      type: string
      description: An enumeration of values that specify the visibility of a report
        parameter, as to whether it is visible at runtime, hidden at runtime, or internal,
        meaning only visible in the definition.
      enum:
      - Visible
      - Hidden
      - Internal
    Query:
      title: Query string
      type: object
      properties:
        CommandText:
          type: string
          description: Command to be executed against given data source
          format: string
        Timeout:
          type: integer
          description: Query Timeout, default is 30 seconds.
          format: int32
      description: Represents a SQL query to be executed. The query cannot contain
        parameters.
    Resource:
      allOf:
      - $ref: '#/components/schemas/CatalogItem'
      - title: Resource
        type: object
        description: The resource object serves as a generalized container for a CatalogItem
          and can be retrieved in a HTTP request. Resource is derived from CatalogItem
          and contains all of its properties.
    ResourceGroup:
      title: ResourceGroup
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/MobileReportResourceGroupType'
        Items:
          type: array
          description: An array of objects of type ResourceItem that contain the contents
            of the ResourceGroup.
          items:
            $ref: '#/components/schemas/ResourceItem'
      description: An object that contains metadata and contents for a ResourceItem.
    ResourceItem:
      title: ResourceItem
      description: An object that specifies the metadata for a Resource.
      allOf:
      - $ref: '#/components/schemas/ManifestItem'
      - type: object
        properties:
          Key:
            type: string
    Role:
      title: Role
      type: object
      properties:
        Name:
          type: string
          description: A string value that specifies the name of the Role.
          format: string
        Description:
          type: string
          description: A string value that constains descriptive text for the Role.
          format: string
      description: An object that specifies security roles that are supported on the
        Report Server instance.
    ScheduleDefinition:
      title: ScheduleDefinition
      type: object
      properties:
        StartDateTime:
          type: string
          description: A string that specifies the date-time of the start of the schedule.
          format: date-time
          example: 2017-04-13T15:51:04Z
        EndDate:
          type: string
          description: A string that specifies the date-time of the end of the schedule.
          format: date-time
          example: 2017-04-13T15:51:04Z
        EndDateSpecified:
          type: boolean
          description: A boolean value that indicates whether the schedule end is
            specified.
          format: true|false
        Recurrence:
          $ref: '#/components/schemas/ScheduleRecurrence'
      description: An object that defines a schedule including a start date-time and
        an optional end date-time.
    ScheduleRecurrence:
      title: ScheduleRecurrence
      type: object
      properties:
        MinuteRecurrence:
          $ref: '#/components/schemas/MinuteRecurrence'
        DailyRecurrence:
          $ref: '#/components/schemas/DailyRecurrence'
        WeeklyRecurrence:
          $ref: '#/components/schemas/WeeklyRecurrence'
        MonthlyRecurrence:
          $ref: '#/components/schemas/MonthlyRecurrence'
        MonthlyDOWRecurrence:
          $ref: '#/components/schemas/MonthlyDOWRecurrence'
      description: An object that defines the recurrence of a schedule. When defining
        the recurrence, only one of the recurrence types can be set.
    ScheduleReference:
      title: ScheduleReference
      type: object
      properties:
        ScheduleId:
          type: string
          description: The Id property of an existing schedule that will be used in
            the current context.
          format: uuid
        Definition:
          $ref: '#/components/schemas/ScheduleDefinition'
      description: An object that contains either a reference to a defined schedule
        or the schedule details for the current context.
    SharedDataSetPath:
      title: SharedDataSetPath
      type: object
      properties:
        Name:
          type: string
          description: A string value that specifies the name of the shared dataset.
          format: string
        Path:
          type: string
          description: A string value that specifies the path to the shared dataset.
          format: string
      description: An object that defines a link to shared dataset object.
    SharedDataSets:
      type: object
      properties:
        DataSets:
          type: array
          items:
            $ref: '#/components/schemas/SharedDataSetPath'
    Subscription:
      title: Subscription
      type: object
      properties:
        Id:
          type: string
          description: A unique UUID value that specifies the identifier by which
            this Subscription can be referenced in requests or in other defined objects.
          format: uuid
          example: 01234567-89ab-cdef-0123-456789abcdef
        Owner:
          type: string
          description: A string value that specifies the owner of the Subscription.
          format: string
        IsDataDriven:
          type: boolean
          description: A boolean value that specifies whether the members of the distribution
            list for the subscription are computed based on data.
          format: true|false
        Description:
          type: string
          description: A string value that contains descriptive text about the Subscription.
          format: string
        Report:
          type: string
          description: A string value that specifies the path of the report for this
            Subscription.
          format: string
        IsActive:
          type: boolean
          description: A boolean value that specifies whether the Subscription is
            currently active.
          format: true|false
        EventType:
          type: string
          description: A string specifying the type of event that triggers the Subscription.
          format: string
        ScheduleDescription:
          type: string
          description: A string value that contains descriptive text about the schedule
            referenced in the Schedule property.
          format: string
        LastRunTime:
          type: string
          description: A string value that contains the date-time that the schedule
            was last run.
          format: date-time
          example: 2017-04-13T15:51:04Z
        LastStatus:
          type: string
          description: A string specifying the Status of the last run.
          format: string
        ExtensionSettings:
          $ref: '#/components/schemas/ExtensionSettings'
        DeliveryExtension:
          type: string
          description: An object that specifies the DeliveryExtension that will be
            used with this Schedule's report delivery.
          format: string
        LocalizedDeliveryExtensionName:
          type: string
          description: Localized version of extension name when available.
          format: string
        ModifiedBy:
          type: string
          description: A string value that contains the network user name of the last
            user to modify the subscription.
          format: string
        ModifiedDate:
          type: string
          description: A string value that contains the date-time of the last modification
            to the subscription.
          format: date-time
          example: 2017-04-13T15:51:04Z
        ParameterValues:
          type: array
          description: An array of items of type ParameterValue that specify the parameter
            values for the subscription.
          items:
            $ref: '#/components/schemas/ParameterValue'
      description: An object that defines a subscription. A Reporting Services subscription
        allows a user to subscribe to a Report or Data Source and then to automatically
        receive an update whenever the item is updated.
    SubscriptionHistory:
      title: SubscriptionHistory
      type: object
      properties:
        Id:
          type: integer
          description: A unique identifier by which this Subscription History record
            can be referenced in requests or in other defined objects.
          format: int32
        SubscriptionID:
          type: string
          description: A unique UUID value that identifies the Subscription that this
            record is associated with.
          format: uuid
          example: 01234567-89ab-cdef-0123-456789abcdef
        Type:
          type: string
          description: A string value that specifies the type of subscription execution.
          enum:
          - Scheduled
          - OnDemand
        StartTime:
          type: string
          description: A string that contains the date-time for when the subscription
            execution started.
          format: date-time
          example: 2017-04-13T15:51:04Z
        EndTime:
          type: string
          description: A string that contains the date-time for when the subscription
            execution ended.
          format: date-time
          example: 2017-04-13T15:51:04Z
        SubscriptionStatus:
          type: string
          description: A string value that represents the status of the subscription
            execution.
          enum:
          - Completed
          - InProgress
          - Failed
        Message:
          type: string
          description: A string value that contains message that describes the status
            of the subscription execution.
          format: string
        Details:
          type: string
          description: A JSON string value that contains the session information and
            error details when a subscription execution fails.
          format: string
      description: An object that defines a subscription history or execution record.
    SystemInfo:
      title: System
      type: object
      properties:
        ReportServerAbsoluteUrl:
          type: string
          description: A string value that specifies the URL for the Report Server.
          format: string
        ReportServerRelativeUrl:
          type: string
          description: A string value that specifies the Report Server Virtual Directory.
          format: string
        WebPortalRelativeUrl:
          type: string
          description: A string value that specifies the URL for the Report Server
            web portal.
          format: string
        ProductName:
          type: string
          description: A string value that specifies the name of the product being
            used.
          format: string
        ProductVersion:
          type: string
          description: A string value that specifies the version of the product being
            used.
          format: string
        ProductType:
          type: string
          description: A string value that specifies the type of the product being
            used.
          enum:
          - PowerBiReportServer
          - SqlServerReportingServices
        TimeZone:
          type: string
          description: A string value that specifies the timezone being used by the
            server.
          format: string
      description: An object that specifies information about the Report Server.
    SystemPolicy:
      type: object
      properties:
        Id:
          type: string
          description: A unique UUID value that specifies the identifier of the SystemPolicy.
          format: uuid
        Policies:
          type: array
          description: An array of objects of type Policy that specify the access
            policies to be applied to the System.
          items:
            $ref: '#/components/schemas/Policy'
    ThumbnailItem:
      title: ThumbnailItem
      description: An object that contains the contents of a thumbnail.
      allOf:
      - $ref: '#/components/schemas/ManifestItem'
      - type: object
        properties:
          Type:
            $ref: '#/components/schemas/MobileReportThumbnailType'
    User:
      title: User
      type: object
      properties:
        Id:
          type: string
          description: A unique UUID value that specifies the identifier by which
            this User object can be referenced in requests or in other defined objects.
          format: uuid
          example: 01234567-89ab-cdef-0123-456789abcdef
        Username:
          type: string
          description: A string value that specifies the network user name for the
            user.
          format: string
        DisplayName:
          type: string
          description: A string value that specifies the name to display for the network
            user.
          format: string
        HasFavoriteItems:
          type: boolean
          description: A boolean value that indicates whether the user has items that
            are designated as favorite items.
          format: true|false
        MyReportsPath:
          type: string
          description: A string value that specifies a path to a folder where a user's
            reports are stored by default. (This feature must be enabled by the server
            administrator).
          format: string
      description: An object that contains information about the Report Server user.
    UserCredentials:
      type: object
      properties:
        UserName:
          type: string
          description: A string value that specifies the user name for the user.
          format: string
        Password:
          type: string
          description: A string value that specifies the password for the user.
          format: string
        Domain:
          type: string
          description: A string value that specifies the domain for the user.
          format: string
    ValidValue:
      title: ValidValue
      type: object
      properties:
        Label:
          type: string
          description: A string value that specifies the label for the ValidValue.
        Value:
          type: string
          description: A string value that specifies the value of the ValidValue.
      description: An object that contains a value that is valid for use in its context,
        in the form of a label-value pair.
    WeeklyRecurrence:
      title: WeeklyRecurrence
      type: object
      properties:
        WeeksInterval:
          type: integer
          description: An Int32 value representing interval in weeks.
          format: int32
        WeeksIntervalSpecified:
          type: boolean
          description: True if using WeeksInterval.
          format: true|false
        DaysOfWeek:
          $ref: '#/components/schemas/DaysOfWeekSelector'
      description: Represents the intervals at which a scheduled report runs. Intervals
        are specified in weeks and on which days of the week.
    WeekNumberEnum:
      title: WeekNumberEnum
      type: string
      description: Describes the week of the month on which a scheduled report runs.
      enum:
      - FirstWeek
      - SecondWeek
      - ThirdWeek
      - FourthWeek
      - LastWeek
    odata.error:
      required:
      - error
      type: object
      properties:
        error:
          $ref: '#/components/schemas/odata.error.main'
    odata.error.detail:
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        target:
          type: string
    odata.error.main:
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        target:
          type: string
        details:
          type: array
          items:
            $ref: '#/components/schemas/odata.error.detail'
        innererror:
          type: object
          properties: {}
          description: The structure of this object is service-specific.
  responses:
    error:
      description: Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/odata.error'
  parameters:
    PathOrId:
      name: Id
      in: path
      description: |-
        The key (GUID or path) that uniquely identifies the object.
        GUID example: 01234567-89ab-cdef-0123-456789abcdef
        path example: path='/folder1/folder2/item'
        If the path itself contains single quote, it should be escaped - add another single quote.
      required: true
      schema:
        type: string
        format: string
    Id:
      name: Id
      in: path
      description: |-
        The key (GUID) that uniquely identifies the object.
        GUID example: 01234567-89ab-cdef-0123-456789abcdef
      required: true
      schema:
        type: string
        format: string
    top:
      name: $top
      in: query
      description: Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)
      schema:
        type: integer
    skip:
      name: $skip
      in: query
      description: Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)
      schema:
        type: integer
    count:
      name: $count
      in: query
      description: Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)
      schema:
        type: string
    filter:
      name: $filter
      in: query
      description: Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)
      schema:
        type: string
    orderby:
      name: $orderBy
      in: query
      description: Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)
      schema:
        type: string
    expand:
      name: $expand
      in: query
      description: Expand related entities, see [OData Expand](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374621)
      schema:
        type: string
    select:
      name: $select
      in: query
      description: Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)
      schema:
        type: string
